using mxProject.Devs.DataGeneration.Fields;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace mxProject.Devs.DataGeneration
{
    /// <summary>
    /// Provides extension methods for <see cref="IDataGeneratorField{T}"/> to support value conversion and string conversion.
    /// </summary>
    public static class IDataGeneratorFieldExtensions
    {
        /// <summary>
        /// Converts the values generated by the specified field using the given converter function.
        /// </summary>
        /// <typeparam name="TSource">The type of the source value.</typeparam>
        /// <typeparam name="TResult">The type of the result value.</typeparam>
        /// <param name="field">The data generator field to convert.</param>
        /// <param name="converter">The function to convert each value.</param>
        /// <returns>A new data generator field that generates converted values.</returns>
        public static IDataGeneratorField<TResult> Convert<TSource, TResult>(this IDataGeneratorField<TSource> field, Converter<TSource?, TResult?> converter)
            where TSource : struct
            where TResult : struct
        {
            async ValueTask<IEnumerable<TResult?>> enumerationCreator(int generateCount)
            {
                using var enumerator = await field.CreateTypedEnumerationAsync(generateCount);

                return Convert(enumerator.GenerateValues(), converter);
            }

            return new DataGeneratorField<TResult>(field.FieldName, field.GetEnumerateValueCount(), field.MayBeNull, enumerationCreator);
        }

        /// <summary>
        /// Converts the values generated by the specified field to <see cref="StringValue"/> using the given converter function.
        /// </summary>
        /// <typeparam name="TSource">The type of the source value.</typeparam>
        /// <param name="field">The data generator field to convert.</param>
        /// <param name="converter">The function to convert each value to a string.</param>
        /// <returns>A new data generator field that generates <see cref="StringValue"/> values.</returns>
        public static IDataGeneratorField<StringValue> ConvertToString<TSource>(this IDataGeneratorField<TSource> field, Converter<TSource?, string?> converter)
            where TSource : struct
        {
            return Convert<TSource, StringValue>(field, x =>
            {
                var result = converter(x);

                if (result == null)
                {
                    return null;
                }
                else
                {
                    return new StringValue(result);
                }
            });
        }

        /// <summary>
        /// Converts a sequence of values using the specified converter function.
        /// </summary>
        /// <typeparam name="TSource">The type of the source value.</typeparam>
        /// <typeparam name="TResult">The type of the result value.</typeparam>
        /// <param name="source">The source sequence.</param>
        /// <param name="converter">The function to convert each value.</param>
        /// <returns>A sequence of converted values.</returns>
        private static IEnumerable<TResult?> Convert<TSource, TResult>(IEnumerable<TSource?> source, Converter<TSource?, TResult?> converter)
            where TSource : struct
            where TResult : struct
        {
            foreach (var value in source)
            {
                yield return converter(value);
            }
        }
    }
}
