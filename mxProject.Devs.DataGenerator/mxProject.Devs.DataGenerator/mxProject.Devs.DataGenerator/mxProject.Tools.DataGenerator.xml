<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mxProject.Devs.DataGenerator</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField">
            <summary>
            Field that returns a value generated based on the value generated.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField.#ctor(System.String,System.Type,System.Threading.Tasks.ValueTask{System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object}})">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field.</param>
            <param name="valueGetterCreator">The task that return a method to get the value of the field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField.#ctor(System.String,System.Type,System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object})">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field.</param>
            <param name="valueGetter">The method to get the value of the field.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField.ValueType">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalField.CreateValueGetterAsync">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField">
            <summary>
            Field that returns values generated based on the value generated.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],System.Threading.Tasks.ValueTask{System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object[]}})">
            <summary>
            Create a new instance.
            </summary>
            <param name="fields">The fields.</param>
            <param name="valueGetterCreator">The task that return a method to get the value of the field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object[]})">
            <summary>
            Create a new instance.
            </summary>
            <param name="fields">The fields.</param>
            <param name="valueGetter">The method to get the value of the field.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.FieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.GetFieldName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.GetValueType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.DataGeneratorAdditionalTupleField.CreateValueGetterAsync">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory">
            <summary>
            Creates a field that returns a value that corresponds to the generated value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``2(System.String,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue">The type of first value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``2(System.String,System.String,System.Collections.Generic.IDictionary{``0,System.Nullable{``1}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue">The type of first value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``3(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``3(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``4(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``4(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``5(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``5(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``6(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``6(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``7(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``7(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``8(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``8(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``9(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``9(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``10(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionary``10(System.String,System.String[],System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``3(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``3(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.Nullable{``2}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``4(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``4(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``5(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``5(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey2``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``4(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``4(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.Nullable{``3}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``5(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``5(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey3``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10},System.Nullable{``11}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``5(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``5(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.Nullable{``4}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``6(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey4``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11},System.Nullable{``12}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``6(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``6(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.Nullable{``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``7(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey5``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12},System.Nullable{``13}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``7(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``7(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.Nullable{``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``8(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13,``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey6``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13},System.Nullable{``14}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``8(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``8(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.Nullable{``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``9(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey7``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14},System.Nullable{``15}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``9(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``9(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.Nullable{``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``10(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``17(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15,``16}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey8``17(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15},System.Nullable{``16}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``10(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},``9})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``10(System.String[],System.String,System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.Nullable{``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``11(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of first value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``12(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``13(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``14(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``15(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``16(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``17(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``17(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``18(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16,``17}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithDictionaryKey9``18(System.String[],System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16},System.Nullable{``17}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``3(System.String,System.String,System.Linq.ILookup{``0,``1},System.Func{``1,System.Nullable{``2}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of first value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``4(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``5(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``6(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``7(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``8(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``9(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``10(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookup``11(System.String,System.String[],System.Linq.ILookup{``0,``1},System.Func{``1,System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey">The type of key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldName">The key field name.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``4(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.Nullable{``3}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``5(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``6(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``7(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``8(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``9(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey2``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2},System.Func{``2,System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10},System.Nullable{``11}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``5(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.Nullable{``4}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``6(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``7(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``8(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``9(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey3``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3},System.Func{``3,System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11},System.Nullable{``12}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``6(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.Nullable{``5}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``7(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``8(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``9(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey4``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4},System.Func{``4,System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12},System.Nullable{``13}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``7(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.Nullable{``6}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``8(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``9(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey5``15(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5},System.Func{``5,System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13},System.Nullable{``14}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``8(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.Nullable{``7}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``9(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``15(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey6``16(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6},System.Func{``6,System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14},System.Nullable{``15}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``9(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.Nullable{``8}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``10(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``15(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``16(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey7``17(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7},System.Func{``7,System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15},System.Nullable{``16}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``10(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.Nullable{``9}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``11(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``15(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``16(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``17(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey8``18(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8},System.Func{``8,System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16},System.Nullable{``17}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``11(System.String[],System.String,System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.Nullable{``10}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue">The type of value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``12(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``13(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``14(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``15(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``16(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``17(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.Nullable{``16}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``18(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.Nullable{``16},System.ValueTuple{System.Nullable{``17}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.WithLookupKey9``19(System.String[],System.String[],System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9},System.Func{``9,System.ValueTuple{System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.Nullable{``16},System.ValueTuple{System.Nullable{``17},System.Nullable{``18}}}})">
            <summary>
            Creates a field that returns the value stored in the specified dictionary.
            </summary>
            <typeparam name="TKey1">The type of first key of the additional values.</typeparam>
            <typeparam name="TKey2">The type of second key of the additional values.</typeparam>
            <typeparam name="TKey3">The type of third key of the additional values.</typeparam>
            <typeparam name="TKey4">The type of fourth key of the additional values.</typeparam>
            <typeparam name="TKey5">The type of fifth key of the additional values.</typeparam>
            <typeparam name="TKey6">The type of sixth key of the additional values.</typeparam>
            <typeparam name="TKey7">The type of seventh key of the additional values.</typeparam>
            <typeparam name="TKey8">The type of eighth key of the additional values.</typeparam>
            <typeparam name="TKey9">The type of ninth key of the additional values.</typeparam>
            <typeparam name="TElement">The type of element to be looked up.</typeparam>
            <typeparam name="TValue1">The type of first value of the additional values.</typeparam>
            <typeparam name="TValue2">The type of second value of the additional values.</typeparam>
            <typeparam name="TValue3">The type of third value of the additional values.</typeparam>
            <typeparam name="TValue4">The type of fourth value of the additional values.</typeparam>
            <typeparam name="TValue5">The type of fifth value of the additional values.</typeparam>
            <typeparam name="TValue6">The type of sixth value of the additional values.</typeparam>
            <typeparam name="TValue7">The type of seventh value of the additional values.</typeparam>
            <typeparam name="TValue8">The type of eighth value of the additional values.</typeparam>
            <typeparam name="TValue9">The type of ninth value of the additional values.</typeparam>
            <param name="keyFieldNames">The key field names.</param>
            <param name="additionalFieldNames">the field names to add.</param>
            <param name="additionalValues">The values of the additional fields.</param>
            <param name="valueSelector">The method for getting a value from a looked-up element.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``10(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},``9})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},``2})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},``3})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},``4})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},``5})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},``6})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},``7})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},``8})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.GetKeyTuple``10(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[],System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},``9})">
            <summary>
            
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TAnyValue"></typeparam>
            <param name="rec"></param>
            <param name="keyFieldNames"></param>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``5(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``6(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``7(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``8(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``9(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory.CreateNullValueArray``10(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.ExpressionFieldSettings">
            <summary>
            A setting for a field that returns the value of an expression.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.ExpressionFieldSettings.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.ExpressionFieldSettings.Expression">
            <summary>
            Gets or sets the expression text of the selector. ex) "x => x.GetInt32(0) * x.GetInt32(1)"
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.ExpressionFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.ExpressionFieldSettings.Assert">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings">
            <summary>
            A setting for a field that returns the value of an expression.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.KeyFields">
            <summary>
            Gets or sets the key field information."
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.AdditionalValues">
            <summary>
            Gets or sets the values of the additional fields.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.Assert">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.WithStringDictionary(mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create an field.
            </summary>
            <param name="keyFields"></param>
            <param name="additionalFields"></param>
            <param name="additionalValues"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.AdditionalFields.JoinFieldSettings.CreateException(mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],System.Exception)">
            <summary>
            Create an exception.
            </summary>
            <param name="keyFields"></param>
            <param name="additionalFields"></param>
            <param name="keyException"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings">
            <summary>
            Basic implementation of additional field settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.FieldName">
            <summary>
            Gets or sets the additional field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.ValueType">
            <summary>
            Gets or sets the type of the additional field.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.GetValueType">
            <summary>
            Gets the type of the additional field.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.CreateField(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField"/> interface.
            </summary>
            <exception cref="T:mxProject.Devs.DataGeneration.DataGeneratorFieldException">
            The field setting is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings.Assert">
            <summary>
            If the settings for this instance are invalid, an exception will be thrown.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings">
            <summary>
            Basic implementation of additional field settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.AdditionalFields">
            <summary>
            Gets or sets the additional field information.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.GetAdditionalFieldNames">
            <summary>
            Gets the additional field names;
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.CreateField(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField"/> interface.
            </summary>
            <exception cref="T:mxProject.Devs.DataGeneration.DataGeneratorFieldException">
            The field setting is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings.Assert">
            <summary>
            If the settings for this instance are invalid, an exception will be thrown.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings">
            <summary>
            Basic implementation of DataGeneratorField settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings.CreateField(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorField"/> interface.
            </summary>
            <exception cref="T:mxProject.Devs.DataGeneration.DataGeneratorFieldException">
            The field setting is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings.Assert">
            <summary>
            If the settings for this instance are invalid, an exception will be thrown.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings">
            <summary>
            DataGenerator settings.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings.Fields">
            <summary>
            Gets or sets the field settings.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings.TupleFields">
            <summary>
            Gets or sets the tuple field settings.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings.AdditionalFields">
            <summary>
            Gets or sets the additional field settings.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings.AdditionalTupleFields">
            <summary>
            Gets or sets the additional tuple field settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorSettings.CreateBuilder(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.DataGenerator"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings">
            <summary>
            Basic implementation of DataGeneratorTupleField settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.GetFieldCount">
            <summary>
            Gets the number of tuple fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.GetFieldNames">
            <summary>
            Gets the names of tuple fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.CreateField(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField"/> interface.
            </summary>
            <exception cref="T:mxProject.Devs.DataGeneration.DataGeneratorFieldException">
            The field setting is invalid.
            </exception>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings.Assert">
            <summary>
            If the settings for this instance are invalid, an exception will be thrown.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings">
            <summary>
            Basic implementation of enumerable settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings.ValueType">
            <summary>
            Gets the type of the value to enumerate.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings.GetEnumerateValueCount(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Gets the number of values that will be enumerated.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings.CreateEnumerableAsync(System.Int32,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="generateCount">Number of values to generate.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings`1">
            <summary>
            Basic implementation of enumerable settings.
            </summary>
            <typeparam name="T">The type of the value to enumerate.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings`1.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings`1.ValueType">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings`1.CreateTypedEnumerableAsync(System.Int32,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.EnumerableSettings`1.CreateEnumerableAsync(System.Int32,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings">
            <summary>
            Settings for a field that enumerates one of the specified enum values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings.EnumTypeName">
            <summary>
            Gets or sets the enum type name.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings.GetValuesCount">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings`1">
            <summary>
            Setting a field that enumerates one of the specified enum values.
            </summary>
            <typeparam name="TEnum">The type of value to enumerate.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyEnumFieldSettings`1.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettings`1">
            <summary>
            Settings for a field that enumerates one of the specified values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettings`1.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1">
            <summary>
            Basic implementation of settings for a field that enumerates one of the specified values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1.NullProbability">
            <summary>
            Gets or sets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1.Assert">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyFieldSettingsBase`1.GetValuesCount">
            <summary>
            Gets the number of values to enumerate.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.AnyStringFieldSettings">
            <summary>
            Settings for a field that enumerates one of the specified string values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.AnyStringFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings">
            <summary>
            Settings for a field that enumerates the direct product.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.Fields">
            <summary>
            Gets or sets the field settings.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.GetFieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.GetFieldNames">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.DirectProductFieldSettings.Assert">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException">
            The value of Fields property is null.
            </exception>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings">
            <summary>
            Settings for a field that enumerates the enum values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings.EnumTypeName">
            <summary>
            Gets or sets the enum type name.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings.GetValuesCount">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings`1">
            <summary>
            Settings for a field to enumerate the specified enum values.
            </summary>
            <typeparam name="TEnum">The type of value to enumerate.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachEnumFieldSettings`1.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettings`1">
            <summary>
            Settings for a field that lists the specified values in order.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettings`1.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorField"/> interface.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1">
            <summary>
            Basic implementation of settings for a field that lists the specified values in order.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1.NullProbability">
            <summary>
            Gets or sets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1.Assert">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachFieldSettingsBase`1.GetValuesCount">
            <summary>
            Gets the number of values to enumerate.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachStringFieldSettings">
            <summary>
            Settings for a field that enumerates the specified values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachStringFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings">
            <summary>
            Settings for a field that lists the specified tuple values in order.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.Fields">
            <summary>
            Gets or sets the fields information.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.Values">
            <summary>
            Gets or sets the tuple values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.NullProbability">
            <summary>
            Gets or sets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.GetFieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.GetFieldNames">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.Assert">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException">
            The value of Fields property is null.
            </exception>
            <exception cref="T:System.NullReferenceException">
            The value of Values property is null.
            </exception>
            <exception cref="T:System.NullReferenceException">
            The value of FieldInfo.FieldName property is null.
            </exception>
            <exception cref="T:System.NullReferenceException">
            The value of FieldInfo.ValueType property is null.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField2``2(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple2``2(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField3``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple3``3(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField4``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple4``4(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField5``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple5``5(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField6``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple6``6(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField7``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple7``7(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField8``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple8``8(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateField9``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="values"></param>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateTuple9``9(mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="settings"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.EachTupleFieldSettings.CreateException(mxProject.Devs.DataGeneration.DataGeneratorFieldInfo[],System.Exception)">
            <summary>
            Create an exception.
            </summary>
            <param name="fields"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomBooleanFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomBooleanFieldSettings.TrueProbability">
            <summary>
            Gets or sets probability of returning true. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomBooleanFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomBooleanFieldSettings.Assert">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomByteFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Byte"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomByteFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomSByteFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.SByte"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomSByteFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt16FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Int16"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt16FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt16FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.UInt16"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt16FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt32FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Int32"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt32FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt32FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.UInt32"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt32FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt64FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Int64"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomInt64FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt64FieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.UInt64"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomUInt64FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomSingleFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Single"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomSingleFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDoubleFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Double"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDoubleFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDecimalFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Decimal"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDecimalFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDateTimeFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDateTimeFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDateTimeOffsetFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.DateTimeOffset"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomDateTimeOffsetFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomTimeSpanFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.TimeSpan"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomTimeSpanFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomGuidFieldSettings">
            <summary>
            Settings for a field that enumerates the random <see cref="T:System.Guid"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomGuidFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomFieldSettingsBase`1">
            <summary>
            Basic implementation of settings for a field that lists the random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomFieldSettingsBase`1.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomFieldSettingsBase`1.NullProbability">
            <summary>
            Gets or sets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomFieldSettingsBase`1.Assert">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1">
            <summary>
            Basic implementation of settings for a field that lists the random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.MinimumValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.SelectorExpression">
            <summary>
            Gets or sets the expression text of the selector. ex) "x => System.Round(x, 1)"
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.CreateSelectorAsync(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a selector from the expression text set in <see cref="P:mxProject.Devs.DataGeneration.Configuration.Fields.RandomNumericFieldSettingsBase`1.SelectorExpression"/> property.
            </summary>
            <returns>A selector.</returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceByteFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.Byte"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceByteFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceSByteFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.SByte"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceSByteFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt16FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.Int16"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt16FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt16FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.UInt16"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt16FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt32FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.Int32"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt32FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt32FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.UInt32"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt32FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt64FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.Int64"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceInt64FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt64FieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.UInt64"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceUInt64FieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateTimeFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.DateTime"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateTimeFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateMonthFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.DateTime"/> values at monthly intervals.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateMonthFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateTimeOffsetFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.DateTimeOffset"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateTimeOffsetFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateMonthOffsetFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.DateTime"/> values at monthly intervals.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceDateMonthOffsetFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceTimeSpanFieldSettings">
            <summary>
            Settings for a field that enumerates the sequential <see cref="T:System.TimeSpan"/> values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceTimeSpanFieldSettings.CreateFieldCore(mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2">
            <summary>
            Basic implementation of settings for a field that lists the seaquencial values.
            </summary>
            <typeparam name="TValue">The type of value to enumerate.</typeparam>
            <typeparam name="TIncrement">The type of increment value.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.NullProbability">
            <summary>
            Gets or sets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.InitialValue">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.MaximumValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.Increment">
            <summary>
            Gets or sets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Fields.SequenceFieldSettingsBase`2.Assert">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder">
            <summary>
            JSON converter builder for resolving subtypes of DataGeneratorField.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.#ctor(JsonSubTypes.JsonSubtypesConverterBuilder,JsonSubTypes.JsonSubtypesConverterBuilder,JsonSubTypes.JsonSubtypesConverterBuilder,JsonSubTypes.JsonSubtypesConverterBuilder)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldSettingsBuilder"></param>
            <param name="tupleFieldSettingsBuilder"></param>
            <param name="additionalFieldSettingsBuilder"></param>
            <param name="additionalTupleFieldSettingsBuilder"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.CreateDefault">
            <summary>
            Create a default instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.RegisterField``1(System.String)">
            <summary>
            Registers the specified subtype of <see cref="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorFieldSettings"/>.
            </summary>
            <typeparam name="T">The subtype.</typeparam>
            <param name="name">The name to associate with the subtype.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.RegisterTupleField``1(System.String)">
            <summary>
            Registers the specified subtype of <see cref="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorTupleFieldSettings"/>.
            </summary>
            <typeparam name="T">The subtype.</typeparam>
            <param name="name">The name to associate with the subtype.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.RegisterAdditionalField``1(System.String)">
            <summary>
            Registers the specified subtype of <see cref="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalFieldSettings"/>.
            </summary>
            <typeparam name="T">The subtype.</typeparam>
            <param name="name">The name to associate with the subtype.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.RegisterAdditionalTupleField``1(System.String)">
            <summary>
            Registers the specified subtype of <see cref="T:mxProject.Devs.DataGeneration.Configuration.DataGeneratorAdditionalTupleFieldSettings"/>.
            </summary>
            <typeparam name="T">The subtype.</typeparam>
            <param name="name">The name to associate with the subtype.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Configuration.Json.DataGeneratorFieldTypeConverterBuilder.Build">
            <summary>
            Creates a JSON converter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.CSharpScriptUtility.CreateFuncAsync``1(System.String,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a selector.
            </summary>
            <returns>A selector.</returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGenerator">
            <summary>
            DataGenerator.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.#ctor(System.Collections.Generic.IList{mxProject.Devs.DataGeneration.IDataGeneratorFieldAccessor})">
            <summary>
            Create a new instance.
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.Dispose(System.Boolean)">
            <summary>
            Disposes the resources it is using.
            </summary>
            <param name="disposing">A value that indicates whether it was called from the dispose method.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.NormalizeFieldName(System.String)">
            <summary>
            Normalizes the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldNameAndIndexes(System.Collections.Generic.IList{mxProject.Devs.DataGeneration.IDataGeneratorFieldAccessor})">
            <summary>
            Gets the combinations of field name and field index.
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGenerator.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldName(System.Int32)">
            <summary>
            Gets the name of the specified field.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetValueType(System.Int32)">
            <summary>
            Gets the value type of the specified field.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldIndex(System.String)">
            <summary>
            Gets the index of the specified field name.
            </summary>
            <param name="name">The field name.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldIndexIfNotFoundThrowException(System.String)">
            <summary>
            Gets the index of the specified field name. Tf not found,, throw an exception.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The specified field is not found.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.AddAdditionalField(mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo,System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object})">
            <summary>
            Adds the specified field.
            </summary>
            <param name="fieldInfo">The field information.</param>
            <param name="valueGetter">The method to get the value of the field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.AssertFieldName(System.String)">
            <summary>
            Asserts the specified field name.
            </summary>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldValue(System.Int32)">
            <summary>
            Gets the value of the specified field. The value is converted to a well-known type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldRawValue(System.Int32)">
            <summary>
            Gets the value of the specified field.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldValueIsNull(System.Int32)">
            <summary>
            Gets a value that indicates whether the value of the specified field is null.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldValue(System.String)">
            <summary>
            Gets the value of the specified field. The value is converted to a well-known type.
            </summary>
            <param name="fieldName">The field name.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The specified field is not found.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldRawValue(System.String)">
            <summary>
            Gets the value of the specified field.
            </summary>
            <param name="fieldName">The field name.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The specified field is not found.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GetFieldValueIsNull(System.String)">
            <summary>
            Gets a value that indicates whether the value of the specified field is null.
            </summary>
            <param name="fieldName">The field name.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The specified field is not found.
            </exception>
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.GenerateNext">
            <summary>
            Generates the next new value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.ThrowExceptionIfEof">
            <summary>
            Tf this instance is EOF, throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.Reset">
            <summary>
            Resets the status of data generation processing.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGenerator.AsDataReader">
            <summary>
            Wrap as a DataReader.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorBuilder">
            <summary>
            DataGeneratorBuilder.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.#ctor(mxProject.Devs.DataGeneration.DataGeneratorFieldFactory)">
            <summary>
            Create a new instance.
            </summary>
            <param name="factory">The field factory.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorBuilder.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.GetFieldName(System.Int32)">
            <summary>
            Gets the name of the specified field.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.GetValueType(System.Int32)">
            <summary>
            Gets the value type of the specified field.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.NormalizeFieldName(System.String)">
            <summary>
            Normalizes the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AssertFieldName(System.String)">
            <summary>
            Asserts the specified field name.
            </summary>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddField(mxProject.Devs.DataGeneration.IDataGeneratorField)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
            <exception cref="T:System.ArgumentNullException">
            The spacified field is null.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AssertField(mxProject.Devs.DataGeneration.IDataGeneratorField)">
            <summary>
            Asserts the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddTupleField(mxProject.Devs.DataGeneration.IDataGeneratorTupleField)">
            <summary>
            Adds the specified tuple field.
            </summary>
            <param name="tuple">The field.</param>
            <exception cref="T:System.ArgumentNullException">
            The spacified field is null.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AssertTupleField(mxProject.Devs.DataGeneration.IDataGeneratorTupleField)">
            <summary>
            Asserts the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddField(System.Func{mxProject.Devs.DataGeneration.DataGeneratorFieldFactory,mxProject.Devs.DataGeneration.IDataGeneratorField})">
            <summary>
            Adds the field created by the specified method.
            </summary>
            <param name="fieldCreator">The method to create field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddTupleField(System.Func{mxProject.Devs.DataGeneration.DataGeneratorFieldFactory,mxProject.Devs.DataGeneration.IDataGeneratorTupleField})">
            <summary>
            Adds the tuple field created by the specified method.
            </summary>
            <param name="fieldCreator">The method to create field.</param>
            <remarks></remarks>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddAdditionalField(mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField)">
            <summary>
            Adds the specified additional field.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AddAdditionalTupleField(mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField)">
            <summary>
            Adds the specified additional tuple field.
            </summary>
            <param name="tuple">The tuple field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.AssertAdditionalTupleField(mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField)">
            <summary>
            Asserts the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.BuildAsync(System.Int32)">
            <summary>
            Creates an instance of DataGenerator.
            </summary>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.BuildAsDataReaderAsync(System.Int32)">
            <summary>
            Creates an instance of DataGenerator and returns DataReader that wraps the DataGenerator.
            </summary>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilder.FromType(System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a DataGeneratorBuilder from the attributes defined for the specified type.
            </summary>
            <param name="modelType">The type of the data model.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorBuilderExtensions">
            <summary>
            Extension methods for <see cref="T:mxProject.Devs.DataGeneration.DataGeneratorBuilder"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilderExtensions.AddAdditionalField(mxProject.Devs.DataGeneration.DataGeneratorBuilder,System.String,System.Type,System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object})">
            <summary>
            Add a field that returns a value generated based on the generated value.
            </summary>
            <param name="builder"></param>
            <param name="additionalFieldName">the field name to add.</param>
            <param name="additionalValueType">the value type to add.</param>
            <param name="valueGetter">The method to get the value of the field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilderExtensions.AddAdditionalTupleField(mxProject.Devs.DataGeneration.DataGeneratorBuilder,System.ValueTuple{System.String,System.Type}[],System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object[]})">
            <summary>
            Add a field that returns values generated based on the generated value.
            </summary>
            <param name="builder"></param>
            <param name="additionalFields">Information about the fields to add.</param>
            <param name="valueGetter">The method to get the values of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilderExtensions.AddAdditionalTupleField(mxProject.Devs.DataGeneration.DataGeneratorBuilder,mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo[],System.Func{mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Object[]})">
            <summary>
            Add a field that returns values generated based on the generated value.
            </summary>
            <param name="builder"></param>
            <param name="additionalFields">Information about the fields to add.</param>
            <param name="valueGetter">The method to get the values of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorBuilderExtensions.AddJoinField(mxProject.Devs.DataGeneration.DataGeneratorBuilder,System.Func{mxProject.Devs.DataGeneration.AdditionalFields.JoinFieldFactory,mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField})">
            <summary>
            Add a field that returns a value that corresponds to the generated value.
            </summary>
            <param name="builder"></param>
            <param name="fieldCreator">A method to create a field.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorContext">
            <summary>
            Context that holds the state of the data generation process.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorContext.#ctor(mxProject.Devs.DataGeneration.DataGeneratorFieldFactory,mxProject.Devs.DataGeneration.IRandomGenerator,mxProject.Devs.DataGeneration.IStringConverter,mxProject.Devs.DataGeneration.EnumerableFactory,System.Object)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldFactory">The field factory.</param>
            <param name="randomGenerator">The random value generation logic.</param>
            <param name="stringConverter">The string converter.</param>
            <param name="enumerableFactory">The enumerable factory.</param>
            <param name="cSharpScriptGlobalObject">The object to use as a global variable in CSharpScript.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorContext.FieldFactory">
            <summary>
            Gets the field factory.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorContext.RandomGenerator">
            <summary>
            Gets the random value generation logic.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorContext.StringConverter">
            <summary>
            Gets the string converter.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorContext.EnumerableFactory">
            <summary>
            Gets the enumerable factory.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorContext.CSharpScriptGlobalObject">
            <summary>
            Gets the object to use as a global variable in CSharpScript.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorFieldException">
            <summary>
            Exception indicating that the field definition is incorrect.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The message.</param>
            <param name="fieldName">The field name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldException.#ctor(System.String,System.String[],System.Exception)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="message">The message.</param>
            <param name="fieldNames">The field names.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorFieldException.FieldNames">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory">
            <summary>
            Generate fields for DataGenerator.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.#ctor(mxProject.Devs.DataGeneration.EnumerableFactory)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="enumeration">The enumeration logic.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Create(System.String,System.Type,System.Nullable{System.Int32},System.Boolean,mxProject.Devs.DataGeneration.EnumerationCreator)">
            <summary>
            Creates a field that returns the values retrieved from the specified enumeration.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="valueType">The value type of the field.</param>
            <param name="enumerateValueCount">Number of values that will be enumerated.</param>
            <param name="mayBeNull">A value that indicates whether it may return a null value.</param>
            <param name="enumeration">The enumeration of field values.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Create``1(System.String,System.Nullable{System.Int32},System.Boolean,mxProject.Devs.DataGeneration.EnumerationCreator{``0})">
            <summary>
            Creates a field that returns the values retrieved from the specified enumeration.
            </summary>
            <typeparam name="T">The value type of the field.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="enumerateValueCount">Number of values that will be enumerated.</param>
            <param name="mayBeNull">A value that indicates whether it may return a null value.</param>
            <param name="enumeration">The enumeration of field values.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Create(System.String,System.Nullable{System.Int32},System.Boolean,mxProject.Devs.DataGeneration.StringEnumerationCreator)">
            <summary>
            Creates a field that returns the values retrieved from the specified enumeration.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="enumerateValueCount">Number of values that will be enumerated.</param>
            <param name="mayBeNull">A value that indicates whether it may return a null value.</param>
            <param name="enumeration">The enumeration of field values.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Create``2(System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}})">
            <summary>
            Creates a tuple field that returns the values retrieved from the specified enumeration.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="enumeration">The enumeration of field values.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Create``3(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Creates a tuple field that returns the values retrieved from the specified enumeration.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="enumeration">The enumeration of field values.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomBoolean(System.String,System.Double,System.Double)">
            <summary>
            Creates a field that returns Boolean random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="trueProbability">probability of returning true. (between 0 and 1.0)</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomByte(System.String,System.Byte,System.Byte,System.Func{System.Byte,System.Byte},System.Double)">
            <summary>
            Creates a field that returns Byte random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomByte(System.String,System.Byte,System.Byte,System.Threading.Tasks.Task{System.Func{System.Byte,System.Byte}},System.Double)">
            <summary>
            Creates a field that returns Byte random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt16(System.String,System.Int16,System.Int16,System.Func{System.Int16,System.Int16},System.Double)">
            <summary>
            Creates a field that returns Int16 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt16(System.String,System.Int16,System.Int16,System.Threading.Tasks.Task{System.Func{System.Int16,System.Int16}},System.Double)">
            <summary>
            Creates a field that returns Int16 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt32(System.String,System.Int32,System.Int32,System.Func{System.Int32,System.Int32},System.Double)">
            <summary>
            Creates a field that returns Int32 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt32(System.String,System.Int32,System.Int32,System.Threading.Tasks.Task{System.Func{System.Int32,System.Int32}},System.Double)">
            <summary>
            Creates a field that returns Int32 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt64(System.String,System.Int64,System.Int64,System.Func{System.Int64,System.Int64},System.Double)">
            <summary>
            Creates a field that returns Int64 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomInt64(System.String,System.Int64,System.Int64,System.Threading.Tasks.Task{System.Func{System.Int64,System.Int64}},System.Double)">
            <summary>
            Creates a field that returns Int64 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomSingle(System.String,System.Single,System.Single,System.Func{System.Single,System.Single},System.Double)">
            <summary>
            Creates a field that returns Single random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomSingle(System.String,System.Single,System.Single,System.Threading.Tasks.Task{System.Func{System.Single,System.Single}},System.Double)">
            <summary>
            Creates a field that returns Single random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDouble(System.String,System.Double,System.Double,System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Creates a field that returns Double random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDouble(System.String,System.Double,System.Double,System.Threading.Tasks.Task{System.Func{System.Double,System.Double}},System.Double)">
            <summary>
            Creates a field that returns Double random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDecimal(System.String,System.Decimal,System.Decimal,System.Func{System.Decimal,System.Decimal},System.Double)">
            <summary>
            Creates a field that returns Decimal random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDecimal(System.String,System.Decimal,System.Decimal,System.Threading.Tasks.Task{System.Func{System.Decimal,System.Decimal}},System.Double)">
            <summary>
            Creates a field that returns Decimal random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomSByte(System.String,System.SByte,System.SByte,System.Func{System.SByte,System.SByte},System.Double)">
            <summary>
            Creates a field that returns SByte random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomSByte(System.String,System.SByte,System.SByte,System.Threading.Tasks.Task{System.Func{System.SByte,System.SByte}},System.Double)">
            <summary>
            Creates a field that returns SByte random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt16(System.String,System.UInt16,System.UInt16,System.Func{System.UInt16,System.UInt16},System.Double)">
            <summary>
            Creates a field that returns UInt16 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt16(System.String,System.UInt16,System.UInt16,System.Threading.Tasks.Task{System.Func{System.UInt16,System.UInt16}},System.Double)">
            <summary>
            Creates a field that returns UInt16 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt32(System.String,System.UInt32,System.UInt32,System.Func{System.UInt32,System.UInt32},System.Double)">
            <summary>
            Creates a field that returns UInt32 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt32(System.String,System.UInt32,System.UInt32,System.Threading.Tasks.Task{System.Func{System.UInt32,System.UInt32}},System.Double)">
            <summary>
            Creates a field that returns UInt32 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt64(System.String,System.UInt64,System.UInt64,System.Func{System.UInt64,System.UInt64},System.Double)">
            <summary>
            Creates a field that returns UInt64 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomUInt64(System.String,System.UInt64,System.UInt64,System.Threading.Tasks.Task{System.Func{System.UInt64,System.UInt64}},System.Double)">
            <summary>
            Creates a field that returns UInt64 random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDateTime(System.String,System.DateTime,System.DateTime,System.Func{System.DateTime,System.DateTime},System.Double)">
            <summary>
            Creates a field that returns DateTime random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDateTime(System.String,System.DateTime,System.DateTime,System.Threading.Tasks.Task{System.Func{System.DateTime,System.DateTime}},System.Double)">
            <summary>
            Creates a field that returns DateTime random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDateTimeOffset(System.String,System.DateTimeOffset,System.DateTimeOffset,System.Func{System.DateTimeOffset,System.DateTimeOffset},System.Double)">
            <summary>
            Creates a field that returns DateTimeOffset random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomDateTimeOffset(System.String,System.DateTimeOffset,System.DateTimeOffset,System.Threading.Tasks.Task{System.Func{System.DateTimeOffset,System.DateTimeOffset}},System.Double)">
            <summary>
            Creates a field that returns DateTimeOffset random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selectorAsync">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomTimeSpan(System.String,System.TimeSpan,System.TimeSpan,System.Func{System.TimeSpan,System.TimeSpan},System.Double)">
            <summary>
            Creates a field that returns TimeSpan random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomTimeSpan(System.String,System.TimeSpan,System.TimeSpan,System.Threading.Tasks.Task{System.Func{System.TimeSpan,System.TimeSpan}},System.Double)">
            <summary>
            Creates a field that returns TimeSpan random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.RandomGuid(System.String,System.Double)">
            <summary>
            Creates a field that returns Guid random values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceByte(System.String,System.Byte,System.Nullable{System.Byte},System.Byte,System.Double)">
            <summary>
            Creates a field that enumerates Byte sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceSByte(System.String,System.SByte,System.Nullable{System.SByte},System.SByte,System.Double)">
            <summary>
            Creates a field that enumerates SByte sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceInt16(System.String,System.Int16,System.Nullable{System.Int16},System.Int16,System.Double)">
            <summary>
            Creates a field that enumerates Int16 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceUInt16(System.String,System.UInt16,System.Nullable{System.UInt16},System.UInt16,System.Double)">
            <summary>
            Creates a field that enumerates UInt16 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceInt32(System.String,System.Int32,System.Nullable{System.Int32},System.Int32,System.Double)">
            <summary>
            Creates a field that enumerates Int32 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceUInt32(System.String,System.UInt32,System.Nullable{System.UInt32},System.UInt32,System.Double)">
            <summary>
            Creates a field that enumerates UInt32 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceInt64(System.String,System.Int64,System.Nullable{System.Int64},System.Int64,System.Double)">
            <summary>
            Creates a field that enumerates Int64 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceUInt64(System.String,System.UInt64,System.Nullable{System.UInt64},System.UInt64,System.Double)">
            <summary>
            Creates a field that enumerates UInt64 sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceDateTime(System.String,System.DateTime,System.DateTime,System.TimeSpan,System.Double)">
            <summary>
            Creates a field that enumerates DateTime sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceDateMonth(System.String,System.DateTime,System.DateTime,System.Int32,System.Double)">
            <summary>
            Creates a field that enumerates DateTime sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="incrementMonths">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceDateTimeOffset(System.String,System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan,System.Double)">
            <summary>
            Creates a field that enumerates DateTimeOffset sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceDateMonthOffset(System.String,System.DateTimeOffset,System.DateTimeOffset,System.Int32,System.Double)">
            <summary>
            Creates a field that enumerates DateTimeOffset sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="incrementMonths">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.SequenceTimeSpan(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Double)">
            <summary>
            Creates a field that enumerates DateTimeOffset sequencial values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="initialValue">The initial value.</param>
            <param name="maximumValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Each``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Each``1(System.String,System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.Each(System.String,System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachEnum``1(System.String,System.Double)">
            <summary>
            Creates a field that enumerates the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachEnum``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Creates a field that enumerates the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachEnum``1(System.String,System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Double)">
            <summary>
            Creates a field that enumerates the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOne``1(System.String,System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a field that enumerates any of the values contained in the specified list.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOne``1(System.String,System.Collections.Generic.IList{System.Nullable{``0}},System.Double)">
            <summary>
            Creates a field that enumerates any of the values contained in the specified list.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOne(System.String,System.Collections.Generic.IList{System.String},System.Double)">
            <summary>
            Creates a field that enumerates any of the values contained in the specified list.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOneEnum``1(System.String,System.Double)">
            <summary>
            Creates a field that enumerates any of the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOneEnum``1(System.String,System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a field that enumerates any of the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.AnyOneEnum``1(System.String,System.Collections.Generic.IList{System.Nullable{``0}},System.Double)">
            <summary>
            Creates a field that enumerates any of the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="fieldName">The name of the field.</param>
            <param name="values">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``2(System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``2(System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``3(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``3(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``4(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``4(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``5(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``5(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``6(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``6(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``7(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``7(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``8(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``8(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``9(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <typeparam name="T9">The type of the ninth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="fieldName9">The name of the ninth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldFactory.EachTuple``9(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Double)">
            <summary>
            Creates a field that enumerates the specified values.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <typeparam name="T9">The type of the ninth value.</typeparam>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="fieldName9">The name of the ninth field.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo">
            <summary>
            Field information.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.CreateFields(System.String[],System.Type[])">
            <summary>
            Creates a new instances. 
            </summary>
            <param name="fieldNames"></param>
            <param name="valueTypes"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.#ctor(System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.#ctor(System.String,System.Type)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The value type.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.ValueType">
            <summary>
            Gets or sets the value type.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorFieldInfo.GetFieldValueType">
            <summary>
            Gets the value type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataGeneratorUtility.ConvertValues(System.Object[],System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Converts the specified value to a type that enumerates it.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="context">The context.</param>
            <returns>The converted values.</returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.IsClosed">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Close">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Depth">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.RecordsAffected">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.FieldCount">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.NextResult">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Read">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetFieldType(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDataTypeName(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetName(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetOrdinal(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetSchemaTable">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetBoolean(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetBoolean(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetByte(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetByte(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetChar(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetData(System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDateTime(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDateTime(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDecimal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDecimal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetDouble(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetFloat(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetFloat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetGuid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetGuid(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt16(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt32(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetInt64(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetValues(System.Object[])">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetRawValue``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.GetRawValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.IsDBNull(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.IsDBNull(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Item(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataReader.Item(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.FieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetBoolean(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetBoolean(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetByte(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetByte(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetChar(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetChar(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetData(System.Int32)">
            <summary>
            <inheritdoc/>. This class does not support this method.
            </summary>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDataTypeName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDateTime(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDateTime(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDecimal(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDecimal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDouble(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetDouble(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetFieldType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetFloat(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetFloat(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetGuid(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetGuid(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt16(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt16(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt32(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt32(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt64(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetInt64(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetOrdinal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetString(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetRawValue``1(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetRawValue``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.GetValues(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.IsDBNull(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DataReaders.DataGenerationDataRecord.IsDBNull(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DefaultRandomGenerator">
            <summary>
            Random value generation logic.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="F:mxProject.Devs.DataGeneration.DefaultRandomGenerator.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextBoolean(System.Double)">
            <inheritdoc/>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextByte(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextInt16(System.Int16,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextInt32(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextInt64(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextSingle(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextDecimal(System.Decimal,System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextSByte(System.SByte,System.SByte)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextUInt16(System.UInt16,System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextUInt32(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextUInt64(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextDateTime(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextDateTimeOffset(System.DateTimeOffset,System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultRandomGenerator.NextTimeSpan(System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.DefaultStringConverter">
            <summary>
            Default string converter.
            </summary>
        </member>
        <member name="F:mxProject.Devs.DataGeneration.DefaultStringConverter.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultStringConverter.ConvertTo(System.String,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.DefaultStringConverter.ConvertTo``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.EnumerableExtensions">
            <summary>
            Entension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts to <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``2(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``2(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``3(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``3(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``4(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``4(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``5(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3,``4}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``5(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``6(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3,``4,``5}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``6(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``7(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``7(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``8(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``8(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsNullable``9(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsSimplify``9(System.Collections.Generic.IEnumerable{System.Nullable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}}})">
            <summary>
            Converts to IEnumerable&lt;(T1?, T2?, T3?, T4?, T5?, T6?, T7?, T8?, T9?)&gt;.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Enumerates the specified enumeration repeatedly.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="values">The values to enumerate.</param>
            <param name="repeatCount">The repeat count.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.RepeatUntil``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Enumerate repeatedly until the enumerated number reaches the specified number.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="values">The values to enumerate.</param>
            <param name="enumerationCount">The enumeration count.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Cast or convert to IList.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="values">The values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.EnumerableFactory">
            <summary>
            Enumeration Factory.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.#ctor(mxProject.Devs.DataGeneration.IRandomGenerator)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="random">The random value generation logic.</param>
        </member>
        <member name="F:mxProject.Devs.DataGeneration.EnumerableFactory.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.EnumerableFactory.RandomGenerator">
            <summary>
            Gets the random value generation logic.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.ExcectingNull(System.Double)">
            <summary>
            Gets whether it is expected to return null.
            </summary>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Enumerates the specified value or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachOrNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Double)">
            <summary>
            Enumerates the specified value or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachOrNull(System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
            Enumerates the specified value or null.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachEnum``1">
            <summary>
            Enumerates the values of the specified enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachEnum(System.Type)">
            <summary>
            Enumerates the values of the specified enumeration type.
            </summary>
            <param name="enumType">The enumeration type.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOne``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            Enumerates any of the values contained in the specified list.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOne``1(System.Int32,System.Collections.Generic.IList{System.Nullable{``0}})">
            <summary>
            Enumerates any of the values contained in the specified list.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOne(System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            Enumerates any of the values contained in the specified list.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.NextAnyIndex(System.Int32)">
            <summary>
            Gets a new next index for AnyOne.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOneOrNull``1(System.Int32,System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Enumerates any of the values contained in the specified list or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOneOrNull``1(System.Int32,System.Collections.Generic.IList{System.Nullable{``0}},System.Double)">
            <summary>
            Enumerates any of the values contained in the specified list or null.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AnyOneOrNull(System.Int32,System.Collections.Generic.IList{System.String},System.Double)">
            <summary>
            Enumerates any of the values contained in the specified list or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="expectedValues">The list containing the values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.Nullable{``1}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.Nullable{``1}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``3(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``4(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.Nullable{``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.Nullable{``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8,System.ValueTuple{``9,``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.Nullable{``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.Nullable{``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8,``9,System.ValueTuple{``10,``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10},System.Nullable{``11}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.ValueTuple{System.Nullable{``10},System.Nullable{``11}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.Nullable{``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.Nullable{``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8,``9,``10,System.ValueTuple{``11,``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11},System.Nullable{``12}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.ValueTuple{System.Nullable{``11},System.Nullable{``12}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.Nullable{``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.Nullable{``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8,``9,``10,``11,System.ValueTuple{``12,``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12},System.Nullable{``13}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.ValueTuple{System.Nullable{``12},System.Nullable{``13}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.Nullable{``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.Nullable{``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13,``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8,``9,``10,``11,``12,System.ValueTuple{``13,``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13},System.Nullable{``14}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.ValueTuple{System.Nullable{``13},System.Nullable{``14}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.Nullable{``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.Nullable{``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14},System.Nullable{``15}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}},System.ValueTuple{System.Nullable{``7},System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.ValueTuple{System.Nullable{``14},System.Nullable{``15}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.Nullable{``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.Nullable{``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15,``16}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.ValueTuple{``8,``9,``10,``11,``12,``13,``14,System.ValueTuple{``15,``16}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15},System.Nullable{``16}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}},System.ValueTuple{System.Nullable{``8},System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.ValueTuple{System.Nullable{``15},System.Nullable{``16}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},``9})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},``9})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``10(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.Nullable{``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``10(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.Nullable{``9}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``11(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``12(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``13(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``14(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``15(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``16(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``17(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``18(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16,``17}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``18(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}},System.ValueTuple{``9,``10,``11,``12,``13,``14,``15,System.ValueTuple{``16,``17}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``18(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16},System.Nullable{``17}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendNullableTuple``18(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}}},System.Collections.Generic.IDictionary{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}},System.ValueTuple{System.Nullable{``9},System.Nullable{``10},System.Nullable{``11},System.Nullable{``12},System.Nullable{``13},System.Nullable{``14},System.Nullable{``15},System.ValueTuple{System.Nullable{``16},System.Nullable{``17}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TKey9">The type of the ninth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <typeparam name="TValue9">The type of the ninth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,``1})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.Nullable{``1}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,``1})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``2(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.Nullable{``1}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``3(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{``0},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Linq.ILookup{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey">The type of the key value.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <typeparam name="TValue8">The type of the eighth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},``2})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.Nullable{``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},``2})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Append``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.Nullable{``2}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Linq.ILookup{System.ValueTuple{``0,``1},System.ValueTuple{System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <typeparam name="TValue7">The type of the seventh correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.Nullable{``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},``3})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.Nullable{``3}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{``3,``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2},System.ValueTuple{System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <typeparam name="TValue6">The type of the sixth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.Nullable{``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},``4})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.Nullable{``4}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{``4,``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3},System.ValueTuple{System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <typeparam name="TValue5">The type of the fifth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.Nullable{``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},``5})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.Nullable{``5}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{``5,``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4},System.ValueTuple{System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <typeparam name="TValue4">The type of the fourth correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.Nullable{``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},``6})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.Nullable{``6}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{``6,``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5},System.ValueTuple{System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <typeparam name="TValue3">The type of the third correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.Nullable{``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},``7})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.Nullable{``7}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{``7,``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TValue1">The type of the first correlated value.</typeparam>
            <typeparam name="TValue2">The type of the second correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.Nullable{``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},``8})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.AppendTuple``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Linq.ILookup{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}},System.Nullable{``8}})">
            <summary>
            Correlates the values of two collections based on matching key values.
            </summary>
            <typeparam name="TKey1">The type of the first value of the key.</typeparam>
            <typeparam name="TKey2">The type of the second value of the key.</typeparam>
            <typeparam name="TKey3">The type of the third value of the key.</typeparam>
            <typeparam name="TKey4">The type of the fourth value of the key.</typeparam>
            <typeparam name="TKey5">The type of the fifth value of the key.</typeparam>
            <typeparam name="TKey6">The type of the sixth value of the key.</typeparam>
            <typeparam name="TKey7">The type of the seventh value of the key.</typeparam>
            <typeparam name="TKey8">The type of the eighth value of the key.</typeparam>
            <typeparam name="TValue">The type of the correlated value.</typeparam>
            <param name="keyValue">The base collection.</param>
            <param name="additionalValues">The collection to join.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <param name="values5">The fifth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <param name="values5">The fifth enumeration.</param>
            <param name="values6">The sixth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <param name="values5">The fifth enumeration.</param>
            <param name="values6">The sixth enumeration.</param>
            <param name="values7">The seventh enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <param name="values5">The fifth enumeration.</param>
            <param name="values6">The sixth enumeration.</param>
            <param name="values7">The seventh enumeration.</param>
            <param name="values8">The eighth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <typeparam name="T9">The type of object to enumerate in the ninth enumeration.</typeparam>
            <param name="values1">The first enumeration.</param>
            <param name="values2">The second enumeration.</param>
            <param name="values3">The third enumeration.</param>
            <param name="values4">The fourth enumeration.</param>
            <param name="values5">The fifth enumeration.</param>
            <param name="values6">The sixth enumeration.</param>
            <param name="values7">The seventh enumeration.</param>
            <param name="values8">The eighth enumeration.</param>
            <param name="values9">The ninth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``2(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``3(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``4(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``5(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}},System.Func{System.Collections.Generic.IEnumerable{``4}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``6(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}},System.Func{System.Collections.Generic.IEnumerable{``4}},System.Func{System.Collections.Generic.IEnumerable{``5}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``7(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}},System.Func{System.Collections.Generic.IEnumerable{``4}},System.Func{System.Collections.Generic.IEnumerable{``5}},System.Func{System.Collections.Generic.IEnumerable{``6}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``8(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}},System.Func{System.Collections.Generic.IEnumerable{``4}},System.Func{System.Collections.Generic.IEnumerable{``5}},System.Func{System.Collections.Generic.IEnumerable{``6}},System.Func{System.Collections.Generic.IEnumerable{``7}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <param name="values8">The method to create the eighth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``9(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``2}},System.Func{System.Collections.Generic.IEnumerable{``3}},System.Func{System.Collections.Generic.IEnumerable{``4}},System.Func{System.Collections.Generic.IEnumerable{``5}},System.Func{System.Collections.Generic.IEnumerable{``6}},System.Func{System.Collections.Generic.IEnumerable{``7}},System.Func{System.Collections.Generic.IEnumerable{``8}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <typeparam name="T9">The type of object to enumerate in the ninth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <param name="values8">The method to create the eighth enumeration.</param>
            <param name="values9">The method to create the ninth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``2(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``3(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``4(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``5(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``4}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``6(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``4}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``5}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``7(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``4}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``5}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``6}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``8(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``4}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``5}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``6}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``7}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <param name="values8">The method to create the eighth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.DirectProduct``9(System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``0}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``1}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``2}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``3}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``4}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``5}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``6}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``7}}},System.Func{System.Collections.Generic.IEnumerable{System.Nullable{``8}}})">
            <summary>
            Enumerates the direct product of the specified enumerations.
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <typeparam name="T9">The type of object to enumerate in the ninth enumeration.</typeparam>
            <param name="values1">The method to create the first enumeration.</param>
            <param name="values2">The method to create the second enumeration.</param>
            <param name="values3">The method to create the third enumeration.</param>
            <param name="values4">The method to create the fourth enumeration.</param>
            <param name="values5">The method to create the fifth enumeration.</param>
            <param name="values6">The method to create the sixth enumeration.</param>
            <param name="values7">The method to create the seventh enumeration.</param>
            <param name="values8">The method to create the eighth enumeration.</param>
            <param name="values9">The method to create the ninth enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <typeparam name="T5">The type of value stored in the fifth collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="values5">The fifth collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``6(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <typeparam name="T5">The type of value stored in the fifth collection.</typeparam>
            <typeparam name="T6">The type of value stored in the sixth collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="values5">The fifth collection.</param>
            <param name="values6">The sixth collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``7(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <typeparam name="T5">The type of value stored in the fifth collection.</typeparam>
            <typeparam name="T6">The type of value stored in the sixth collection.</typeparam>
            <typeparam name="T7">The type of value stored in the seventh collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="values5">The fifth collection.</param>
            <param name="values6">The sixth collection.</param>
            <param name="values7">The seventh collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``8(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <typeparam name="T5">The type of value stored in the fifth collection.</typeparam>
            <typeparam name="T6">The type of value stored in the sixth collection.</typeparam>
            <typeparam name="T7">The type of value stored in the seventh collection.</typeparam>
            <typeparam name="T8">The type of value stored in the eighth collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="values5">The fifth collection.</param>
            <param name="values6">The sixth collection.</param>
            <param name="values7">The seventh collection.</param>
            <param name="values8">The eighth collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.EachParallel``9(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4},System.Collections.Generic.IEnumerable{``5},System.Collections.Generic.IEnumerable{``6},System.Collections.Generic.IEnumerable{``7},System.Collections.Generic.IEnumerable{``8},System.Boolean)">
            <summary>
            Enumerates values ​​in parallel from the specified collections.
            </summary>
            <typeparam name="T1">The type of value stored in the first collection.</typeparam>
            <typeparam name="T2">The type of value stored in the second collection.</typeparam>
            <typeparam name="T3">The type of value stored in the third collection.</typeparam>
            <typeparam name="T4">The type of value stored in the fourth collection.</typeparam>
            <typeparam name="T5">The type of value stored in the fifth collection.</typeparam>
            <typeparam name="T6">The type of value stored in the sixth collection.</typeparam>
            <typeparam name="T7">The type of value stored in the seventh collection.</typeparam>
            <typeparam name="T8">The type of value stored in the eighth collection.</typeparam>
            <typeparam name="T9">The type of value stored in the ninth collection.</typeparam>
            <param name="values1">The first collection.</param>
            <param name="values2">The second collection.</param>
            <param name="values3">The third collection.</param>
            <param name="values4">The fourth collection.</param>
            <param name="values5">The fifth collection.</param>
            <param name="values6">The sixth collection.</param>
            <param name="values7">The seventh collection.</param>
            <param name="values8">The eighth collection.</param>
            <param name="values9">The ninth collection.</param>
            <param name="exitWhenAnyCompleted">A value that indicates whether to exit when the enumeration of any collection is complete.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg">The type of value to use as the argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``2(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Func{System.Nullable{``0},System.Nullable{``1}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg">The type of value to use as the argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``3(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``4(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``5(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``6(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``6(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``7(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5}},System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``7(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``8(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TArg7">The type of value to use as the seevnth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``8(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TArg7">The type of value to use as the seevnth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``9(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TArg7">The type of value to use as the seevnth argument.</typeparam>
            <typeparam name="TArg8">The type of value to use as the eighth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.Expression``9(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}}},System.Func{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.Nullable{``8}})">
            <summary>
            Enumerates the specified values and the return value of the expression.
            </summary>
            <typeparam name="TArg1">The type of value to use as the first argument.</typeparam>
            <typeparam name="TArg2">The type of value to use as the second argument.</typeparam>
            <typeparam name="TArg3">The type of value to use as the third argument.</typeparam>
            <typeparam name="TArg4">The type of value to use as the fourth argument.</typeparam>
            <typeparam name="TArg5">The type of value to use as the fifth argument.</typeparam>
            <typeparam name="TArg6">The type of value to use as the sixth argument.</typeparam>
            <typeparam name="TArg7">The type of value to use as the seevnth argument.</typeparam>
            <typeparam name="TArg8">The type of value to use as the eighth argument.</typeparam>
            <typeparam name="TResult">The type of the return value of the expression.</typeparam>
            <param name="argumentsValues">The values to use as the argument.</param>
            <param name="func">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomBoolean(System.Int32,System.Double)">
            <summary>
            Enumerates random values of type Boolean or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="trueProbability">probability of returning true. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomBooleanOrNull(System.Int32,System.Double,System.Double)">
            <summary>
            Enumerates random values of type Boolean or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="trueProbability">probability of returning true. (between 0 and 1.0)</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomByte(System.Int32,System.Byte,System.Byte,System.Func{System.Byte,System.Byte})">
            <summary>
            Enumerates random values of type Byte.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomByteOrNull(System.Int32,System.Byte,System.Byte,System.Double,System.Func{System.Byte,System.Byte})">
            <summary>
            Enumerates random values of type Byte or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt16(System.Int32,System.Int16,System.Int16,System.Func{System.Int16,System.Int16})">
            <summary>
            Enumerates random values of type Int16.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt16OrNull(System.Int32,System.Int16,System.Int16,System.Double,System.Func{System.Int16,System.Int16})">
            <summary>
            Enumerates random values of type Int16 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt32(System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Enumerates random values of type Int32.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt32OrNull(System.Int32,System.Int32,System.Int32,System.Double,System.Func{System.Int32,System.Int32})">
            <summary>
            Enumerates random values of type Int32 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt64(System.Int32,System.Int64,System.Int64,System.Func{System.Int64,System.Int64})">
            <summary>
            Enumerates random values of type Int64.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomInt64OrNull(System.Int32,System.Int64,System.Int64,System.Double,System.Func{System.Int64,System.Int64})">
            <summary>
            Enumerates random values of type Int64 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomSingle(System.Int32,System.Single,System.Single,System.Func{System.Single,System.Single})">
            <summary>
            Enumerates random values of type Single.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomSingleOrNull(System.Int32,System.Single,System.Single,System.Double,System.Func{System.Single,System.Single})">
            <summary>
            Enumerates random values of type Single or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDouble(System.Int32,System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Enumerates random values of type Double.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDoubleOrNull(System.Int32,System.Double,System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
            Enumerates random values of type Double or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDecimal(System.Int32,System.Decimal,System.Decimal,System.Func{System.Decimal,System.Decimal})">
            <summary>
            Enumerates random values of type Decimal.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDecimalOrNull(System.Int32,System.Decimal,System.Decimal,System.Double,System.Func{System.Decimal,System.Decimal})">
            <summary>
            Enumerates random values of type Decimal or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomSByte(System.Int32,System.SByte,System.SByte,System.Func{System.SByte,System.SByte})">
            <summary>
            Enumerates random values of type SByte.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomSByteOrNull(System.Int32,System.SByte,System.SByte,System.Double,System.Func{System.SByte,System.SByte})">
            <summary>
            Enumerates random values of type SByte or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt16(System.Int32,System.UInt16,System.UInt16,System.Func{System.UInt16,System.UInt16})">
            <summary>
            Enumerates random values of type UInt16.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt16OrNull(System.Int32,System.UInt16,System.UInt16,System.Double,System.Func{System.UInt16,System.UInt16})">
            <summary>
            Enumerates random values of type UInt6 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt32(System.Int32,System.UInt32,System.UInt32,System.Func{System.UInt32,System.UInt32})">
            <summary>
            Enumerates random values of type UInt32.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt32OrNull(System.Int32,System.UInt32,System.UInt32,System.Double,System.Func{System.UInt32,System.UInt32})">
            <summary>
            Enumerates random values of type UInt32 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt64(System.Int32,System.UInt64,System.UInt64,System.Func{System.UInt64,System.UInt64})">
            <summary>
            Enumerates random values of type UInt64.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomUInt64OrNull(System.Int32,System.UInt64,System.UInt64,System.Double,System.Func{System.UInt64,System.UInt64})">
            <summary>
            Enumerates random values of type UInt64 or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDateTime(System.Int32,System.DateTime,System.DateTime,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Enumerates random values of type DateTime.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDateTimeOrNull(System.Int32,System.DateTime,System.DateTime,System.Double,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Enumerates random values of type DateTime or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDateTimeOffset(System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.Func{System.DateTimeOffset,System.DateTimeOffset})">
            <summary>
            Enumerates random values of type DateTimeOffset.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomDateTimeOffsetOrNull(System.Int32,System.DateTimeOffset,System.DateTimeOffset,System.Double,System.Func{System.DateTimeOffset,System.DateTimeOffset})">
            <summary>
            Enumerates random values of type DateTimeOffset or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomTimeSpan(System.Int32,System.TimeSpan,System.TimeSpan,System.Func{System.TimeSpan,System.TimeSpan})">
            <summary>
            Enumerates random values of type TimeSpan.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomTimeSpanOrNull(System.Int32,System.TimeSpan,System.TimeSpan,System.Double,System.Func{System.TimeSpan,System.TimeSpan})">
            <summary>
            Enumerates random values of type TimeSpan or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selector">The transform function to apply to each value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomGuid(System.Int32)">
            <summary>
            Enumerates random values of type Guid.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.RandomGuidOrNull(System.Int32,System.Double)">
            <summary>
            Enumerates random values of type TimeSpan or null.
            </summary>
            <param name="count">The number of values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceByte(System.Byte,System.Byte,System.Byte)">
            <summary>
            Enumerates Byte sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceSByte(System.SByte,System.SByte,System.SByte)">
            <summary>
            Enumerates SByte sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.SByte,System.SByte,System.SByte)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceInt16(System.Int16,System.Int16,System.Int16)">
            <summary>
            Enumerates Int16 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.Int16,System.Int16,System.Int16)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceUInt16(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Enumerates UInt16 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceInt32(System.Int32,System.Int32,System.Int32)">
            <summary>
            Enumerates Int32 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceUInt32(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Enumerates UInt32 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceInt64(System.Int64,System.Int64,System.Int64)">
            <summary>
            Enumerates Int64 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.Int64,System.Int64,System.Int64)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceUInt64(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Enumerates UInt64 sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceDateTime(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Enumerates DateTime sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceDateMonth(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Enumerates DateTime sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="incrementMonths">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="incrementMonths">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceDateTimeOffset(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Enumerates DateTimeOffset sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceDateMonthOffset(System.DateTimeOffset,System.DateTimeOffset,System.Int32)">
            <summary>
            Enumerates DateTimeOffset sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="incrementMonths">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.DateTimeOffset,System.DateTimeOffset,System.Int32)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="incrementMonths">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.SequenceTimeSpan(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Enumerates TimeSpan sequencial values.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.EnumerableFactory.GetSequencialValueCount(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the number of values that will be enumerated from the sequence.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">Amount of increase in value when creating a new sequence value.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorField">
            <summary>
            Basic implementation of a field.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.#ctor(System.String,System.Type,System.Nullable{System.Int32},System.Boolean,mxProject.Devs.DataGeneration.EnumerationCreator)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="valueType">The value type.</param>
            <param name="enumerateValueCount">Number of values that will be enumerated.</param>
            <param name="mayBeNull">A value that indicates whether it may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.IsFixedLength">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.MayBeNull">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.GetEnumerateValueCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration">
            <summary>
            Field of data generator.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorField,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration.Reset">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration.GetRawValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration.IsNullValue">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase">
            <summary>
            Basic implementation of a field.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorField)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.Dispose(System.Boolean)">
            <summary>
            Disposes the resources it is using.
            </summary>
            <param name="disposing">A value that indicates whether it was called from the dispose method.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.Field">
            <summary>
            Gets the field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorFieldEnumeration#FieldName">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorFieldEnumeration#ValueType">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.Reset">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.GetRawValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase.IsNullValue">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase`1">
            <summary>
            Basic implementation of a field.
            </summary>
            <typeparam name="T">The value type of the field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase`1.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorField)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="field">The name of the field.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase`1.GetTypedValue">
            <summary>
            Gets the field value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase`1.GetRawValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumerationBase`1.IsNullValue">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1">
            <summary>
            Field of data generator.
            </summary>
            <typeparam name="T">The value type of the field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorField,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1.#ctor(mxProject.Devs.DataGeneration.IDataGeneratorField,System.Collections.Generic.IEnumerable{System.Nullable{`0}})">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1.GetTypedValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorFieldEnumeration`1.Reset">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1">
            <summary>
            Basic implementation of a field.
            </summary>
            <typeparam name="T">The value type of the field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.#ctor(System.String,System.Nullable{System.Int32},System.Boolean,mxProject.Devs.DataGeneration.EnumerationCreator{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <param name="enumerateValueCount">Number of values that will be enumerated.</param>
            <param name="mayBeNull">A value that indicates whether it may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.IsFixedLength">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.MayBeNull">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.GetEnumerateValueCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.CreateEnumerationAsync(System.Int32)">
            <summary>
            
            </summary>
            <param name="generationCount"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.mxProject#Tools#DataGeneration#IDataGeneratorField{T}#CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorField`1.mxProject#Tools#DataGeneration#IDataGeneratorField#CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase">
            <summary>
            Basic implement of a field that generates a tuple of multiple values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.#ctor(System.String[],System.Type[],System.Boolean[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldNames">The names of the fields.</param>
            <param name="valueTypes">The value types of the fields.</param>
            <param name="mayBeNull">A value that indicates whether the fields may return a null value.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.FieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.GetFieldName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.GetValueType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.MayBeNull(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldBase.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase">
            <summary>
            Basic implementation of a field that generates a tuple of multiple values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldNames">The name of the fields.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.Dispose(System.Boolean)">
            <summary>
            Disposes the resources it is using.
            </summary>
            <param name="disposing">A value that indicates whether it was called from the dispose method.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.FieldCount">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.GetFieldName(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.Reset">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.GetValueType(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#GetValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.GetValue(System.Int32)">
            <summary>
            Gets the field value. The value is converted to a well-known type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.GetRawValue(System.Int32)">
            <summary>
            Gets the field value.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.IsNullValue(System.Int32)">
            <summary>
            Gets a value that indicates whether the generated value is null.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#GetValues(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#GetValues(System.Span{System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase.mxProject#Tools#DataGeneration#IDataGeneratorTupleFieldEnumeration#GetValues(System.Memory{System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1">
            <summary>
            Basic implementation of a field that generates a tuple of multiple values.
            </summary>
            <typeparam name="TTuple">The value type to enumerate.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.#ctor(System.String[],System.Type[],System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldNames">The names of the fields.</param>
            <param name="valueTypes">The value types of the fields.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.ThrowExceptionIfEof">
            <summary>
            Tf this instance is EOF, throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This generator is already EOF. 
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.GetTypedValues">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">
            This enumerator is already EOF.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumerationBase`1.GetValueType(System.Int32)">
            <inheritdoc/>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`2">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`2.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`2.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`2.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`3">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`3.#ctor(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`3.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`3.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`4">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`4.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`4.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`4.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`5">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`5.#ctor(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3},System.Nullable{`4}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`5.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`5.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`6">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`6.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3},System.Nullable{`4},System.Nullable{`5}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`6.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`6.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`7">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`7.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3},System.Nullable{`4},System.Nullable{`5},System.Nullable{`6}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`7.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`7.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`8">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`8.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3},System.Nullable{`4},System.Nullable{`5},System.Nullable{`6},System.ValueTuple{System.Nullable{`7}}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`8.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`8.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`9">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`9.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{`0},System.Nullable{`1},System.Nullable{`2},System.Nullable{`3},System.Nullable{`4},System.Nullable{`5},System.Nullable{`6},System.ValueTuple{System.Nullable{`7},System.Nullable{`8}}}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="fieldName9">The name of the ninth field.</param>
            <param name="enumeration">Enumeration of field values.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`9.GetRawValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleFieldEnumeration`9.IsNullValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`2">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`2.#ctor(System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`2.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`2.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`3">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`3.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`3.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`3.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`4">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`4.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`4.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`4.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`5">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`5.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3,`4})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="mayBeNull5">A value that indicates whether the fifth field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`5.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`5.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`6">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`6.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3,`4,`5})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="mayBeNull5">A value that indicates whether the fifth field may return a null value.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="mayBeNull6">A value that indicates whether the sixth field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`6.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`6.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`7">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`7.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="mayBeNull5">A value that indicates whether the fifth field may return a null value.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="mayBeNull6">A value that indicates whether the sixth field may return a null value.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="mayBeNull7">A value that indicates whether the seventh field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`7.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`7.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`8">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`8.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="mayBeNull5">A value that indicates whether the fifth field may return a null value.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="mayBeNull6">A value that indicates whether the sixth field may return a null value.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="mayBeNull7">A value that indicates whether the seventh field may return a null value.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="mayBeNull8">A value that indicates whether the eighth field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`8.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`8.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`9">
            <summary>
            Field that generates a tuple of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`9.#ctor(System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,mxProject.Devs.DataGeneration.TupleEnumerationCreator{`0,`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fieldName1">The name of the first field.</param>
            <param name="mayBeNull1">A value that indicates whether the first field may return a null value.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="mayBeNull2">A value that indicates whether the second field may return a null value.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="mayBeNull3">A value that indicates whether the third field may return a null value.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="mayBeNull4">A value that indicates whether the fourth field may return a null value.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="mayBeNull5">A value that indicates whether the fifth field may return a null value.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="mayBeNull6">A value that indicates whether the sixth field may return a null value.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="mayBeNull7">A value that indicates whether the seventh field may return a null value.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="mayBeNull8">A value that indicates whether the eighth field may return a null value.</param>
            <param name="fieldName9">The name of the ninth field.</param>
            <param name="mayBeNull9">A value that indicates whether the ninth field may return a null value.</param>
            <param name="enumerationCreator">The method to generate an enumeration.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`9.CreateEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DataGeneratorTupleField`9.CreateTypedEnumerationAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory">
            <summary>
            Factory methods that instantiates a DataGeneratorTupleField that generates values based on DirectProduct.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField(mxProject.Devs.DataGeneration.IDataGeneratorField[],mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="context"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            fields is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The specified number of fields is not supported.
            </exception>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct2``2(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct3``3(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct4``4(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct5``5(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="field5">The fifth field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct6``6(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="field5">The fifth field.</param>
            <param name="field6">The sixth field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct7``7(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="field5">The fifth field.</param>
            <param name="field6">The sixth field.</param>
            <param name="field7">The seventh field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct8``8(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="field5">The fifth field.</param>
            <param name="field6">The sixth field.</param>
            <param name="field7">The seventh field.</param>
            <param name="field8">The eighth field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateTupleField_DirectProduct9``9(mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.IDataGeneratorField,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Create a tuple field.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
            <param name="field1">The first field.</param>
            <param name="field2">The second field.</param>
            <param name="field3">The third field.</param>
            <param name="field4">The fourth field.</param>
            <param name="field5">The fifth field.</param>
            <param name="field6">The sixth field.</param>
            <param name="field7">The seventh field.</param>
            <param name="field8">The eighth field.</param>
            <param name="field9">The ninth field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.EnumerateFieldValues``1(mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration{``0})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Fields.DirectProductFieldFactory.CreateException(mxProject.Devs.DataGeneration.IDataGeneratorField[],System.Exception)">
            <summary>
            Create an exception.
            </summary>
            <param name="fields"></param>
            <param name="keyException"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.FieldValueConverter">
            <summary>
            Field value converter.
            </summary>
        </member>
        <member name="F:mxProject.Devs.DataGeneration.FieldValueConverter.Default">
            <summary>
            Default instance.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``2(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``3(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``4(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``5(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``6(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``7(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``8(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToTuple``9(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <typeparam name="T9">The type of the ninth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``2(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``3(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``4(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``5(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``6(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``7(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``8(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.ToNullableTuple``9(System.Object[])">
            <summary>
            Creates a tuple from the values in the specified array.
            </summary>
            <typeparam name="T1">The type of the first value.</typeparam>
            <typeparam name="T2">The type of the second value.</typeparam>
            <typeparam name="T3">The type of the third value.</typeparam>
            <typeparam name="T4">The type of the fourth value.</typeparam>
            <typeparam name="T5">The type of the fifth value.</typeparam>
            <typeparam name="T6">The type of the sixth value.</typeparam>
            <typeparam name="T7">The type of the seventh value.</typeparam>
            <typeparam name="T8">The type of the eighth value.</typeparam>
            <typeparam name="T9">The type of the ninth value.</typeparam>
            <param name="values">The array.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.FieldValueConverter.Cast``1(System.Object)">
            <summary>
            Casts the specified value.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGenerationRecord">
            <summary>
            Provides the functionality needed for a DataRecord to read the generated values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetRawValue``1(System.Int32)">
            <summary>
            Gets the generated raw value of the specified field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetBoolean(System.String)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetByte(System.String)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetChar(System.String)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetDateTime(System.String)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetDecimal(System.String)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetDouble(System.String)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetFloat(System.String)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetGuid(System.String)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetInt16(System.String)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetInt32(System.String)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetInt64(System.String)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetString(System.String)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetValue(System.String)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.GetRawValue``1(System.String)">
            <summary>
            Gets the generated raw value of the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGenerationRecord.IsDBNull(System.String)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGenerationReader">
            <summary>
            Provides the functionality needed for a DataReader to read the generated values.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField">
            <summary>
            Provides the required functionality for an additional field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalField.CreateValueGetterAsync">
            <summary>
            Creates a method to get the value of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField">
            <summary>
            Provides the required functionality for an additional tuple field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField.GetFieldName(System.Int32)">
            <summary>
            Gets the field name.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField.GetValueType(System.Int32)">
            <summary>
            Gets the value type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorAdditionalTupleField.CreateValueGetterAsync">
            <summary>
            Creates a method to get the value of the field.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorField">
            <summary>
            Provides the required functionality for a data generator field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorField.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorField.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorField.IsFixedLength">
            <summary>
            Gets a value that indicates whether the number of values to generate is fixed.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorField.GetEnumerateValueCount">
            <summary>
            Gets the number of values to generate.
            </summary>
            <returns>Returns null if the number of values to generate is not fixed.</returns>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorField.MayBeNull">
            <summary>
            Gets a value that indicates whether it may return a null value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorField.CreateEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration">
            <summary>
            Provides the required functionality for a data generator field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.GenerateNext">
            <summary>
            Generates the next new value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.Reset">
            <summary>
            Resets the status of data generation processing.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.GetValue">
            <summary>
            Gets the generated value. The value is converted to a well-known type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.GetRawValue">
            <summary>
            Gets the generated value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration.IsNullValue">
            <summary>
            Gets a value that indicates whether the generated value is null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumerationExtensions.GenerateValues``1(mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration{``0})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration`1">
            <summary>
            Provides the required functionality for a data generator field.
            </summary>
            <typeparam name="T">The type of value to generate.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorFieldEnumeration`1.GetTypedValue">
            <summary>
            Get the generated value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo">
            <summary>
            Provides definitions for data generator field.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorFieldInfo.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorField`1">
            <summary>
            Provides the required functionality for a data generator field.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorField`1.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorTupleField.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField.GetFieldName(System.Int32)">
            <summary>
            Gets the field name.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField.GetValueType(System.Int32)">
            <summary>
            Gets the value type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField.MayBeNull(System.Int32)">
            <summary>
            Gets a value that indicates whether it may return a null value.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField.CreateEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.FieldCount">
            <summary>
            Gets the field count.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetFieldName(System.Int32)">
            <summary>
            Gets the field name.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetValueType(System.Int32)">
            <summary>
            Gets the value type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GenerateNext">
            <summary>
            Generates the next new value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.Reset">
            <summary>
            Resets the status of data generation processing.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetValue(System.Int32)">
            <summary>
            Gets the generated value. The value is converted to a well-known type.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetRawValue(System.Int32)">
            <summary>
            Gets the generated value.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.IsNullValue(System.Int32)">
            <summary>
            Gets a value that indicates whether the generated value is null.
            </summary>
            <param name="index">The field index.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the generated values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetValues(System.Span{System.Object})">
            <summary>
            Populates a span with the generated values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration.GetValues(System.Memory{System.Object})">
            <summary>
            Populates a memory with the generated values.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``2(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``3(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``4(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``5(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3,``4})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``6(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3,``4,``5})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``7(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``8(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumerationExtensions.GenerateValues``9(mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Enumerates the values of the specified field.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
            <typeparam name="T7"></typeparam>
            <typeparam name="T8"></typeparam>
            <typeparam name="T9"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`2">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`2.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`3">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`3.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`4">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`4.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`5">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`5.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`6">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`6.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`7">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`7.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`8">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`8.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`9">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleFieldEnumeration`9.GetTypedValues">
            <summary>
            Gets the generated values.
            </summary>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`2">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`2.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`3">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`3.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`4">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`4.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`5">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`5.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`6">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`6.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`7">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`7.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`8">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`8.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`9">
            <summary>
            Provides the functionality needed for fields that generate tuples of multiple values.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataGeneratorTupleField`9.CreateTypedEnumerationAsync(System.Int32)">
            <summary>
            Creates an enumeration.
            </summary>
            <param name="generationCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IDataRecordExtensions">
            <summary>
            Extension methods for <see cref="T:System.Data.IDataRecord"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetByte(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetBytes(System.Data.IDataRecord,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <param name="fieldOffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetChar(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetChars(System.Data.IDataRecord,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <param name="fieldoffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetData(System.Data.IDataRecord,System.String)">
            <summary>
            Returns an System.Data.IDataReader for the specified column ordinal.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetDecimal(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetFloat(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetGuid(System.Data.IDataRecord,System.String)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetValue(System.Data.IDataRecord,System.String)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawValue``1(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String)">
            <summary>
            Gets the generated raw value of the specified field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.IsDBNull(System.Data.IDataRecord,System.String)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="record"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``2(System.Data.IDataRecord,System.Int32,System.Int32)">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``2(System.Data.IDataRecord,System.Int32[])">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``2(System.Data.IDataRecord,System.String,System.String)">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The index of the second field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``2(System.Data.IDataRecord,System.String[])">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``3(System.Data.IDataRecord,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``3(System.Data.IDataRecord,System.Int32[])">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``3(System.Data.IDataRecord,System.String,System.String,System.String)">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetTuple``3(System.Data.IDataRecord,System.String[])">
            <summary>
            Gets the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``2(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``2(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``2(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The index of the second field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``2(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``3(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``4(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <param name="fieldIndex5">The index of the fifth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``5(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <param name="fieldIndex5">The index of the fifth field.</param>
            <param name="fieldIndex6">The index of the sixth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``6(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <param name="fieldIndex5">The index of the fifth field.</param>
            <param name="fieldIndex6">The index of the sixth field.</param>
            <param name="fieldIndex7">The index of the seventh field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``7(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <param name="fieldIndex5">The index of the fifth field.</param>
            <param name="fieldIndex6">The index of the sixth field.</param>
            <param name="fieldIndex7">The index of the seventh field.</param>
            <param name="fieldIndex8">The index of the eighth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``8(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndex1">The index of the first field.</param>
            <param name="fieldIndex2">The index of the second field.</param>
            <param name="fieldIndex3">The index of the third field.</param>
            <param name="fieldIndex4">The index of the fourth field.</param>
            <param name="fieldIndex5">The index of the fifth field.</param>
            <param name="fieldIndex6">The index of the sixth field.</param>
            <param name="fieldIndex7">The index of the seventh field.</param>
            <param name="fieldIndex8">The index of the eighth field.</param>
            <param name="fieldIndex9">The index of the ninth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.Int32[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
            <param name="record"></param>
            <param name="fieldIndexes">The indexes of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
            <param name="record"></param>
            <param name="fieldName1">The name of the first field.</param>
            <param name="fieldName2">The name of the second field.</param>
            <param name="fieldName3">The name of the third field.</param>
            <param name="fieldName4">The name of the fourth field.</param>
            <param name="fieldName5">The name of the fifth field.</param>
            <param name="fieldName6">The name of the sixth field.</param>
            <param name="fieldName7">The name of the seventh field.</param>
            <param name="fieldName8">The name of the eighth field.</param>
            <param name="fieldName9">The name of the ninth field.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDataRecordExtensions.GetRawTuple``9(mxProject.Devs.DataGeneration.IDataGenerationRecord,System.String[])">
            <summary>
            GetRaws the values of multiple specified fields.
            </summary>
            <typeparam name="T1">The value type of the first field.</typeparam>
            <typeparam name="T2">The value type of the second field.</typeparam>
            <typeparam name="T3">The value type of the third field.</typeparam>
            <typeparam name="T4">The value type of the fourth field.</typeparam>
            <typeparam name="T5">The value type of the fifth field.</typeparam>
            <typeparam name="T6">The value type of the sixth field.</typeparam>
            <typeparam name="T7">The value type of the seventh field.</typeparam>
            <typeparam name="T8">The value type of the eighth field.</typeparam>
            <typeparam name="T9">The value type of the ninth field.</typeparam>
            <param name="record"></param>
            <param name="fieldNames">The names of the fields.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndObject``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Wraps to IDictionary&lt;object, object&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``5(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``6(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``7(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``8(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsObjectAndArray``9(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            Wraps to IDictionary&lt;object, object[]&gt;.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsArrayAndObject``3(System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            Wraps to IDictionary&lt;object[], object&gt;.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value``2(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value1(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value1``2(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value2(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value2``3(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value3(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value3``4(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value4(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value4``5(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value5(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value5``6(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value6(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value6``7(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value7(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value7``8(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value8(System.Collections.Generic.IDictionary{System.Object,System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key_Value8``9(System.Collections.Generic.IDictionary{System.Object,System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value``2(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value1``2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value2``3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value3``4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value4``5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value5``6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value6``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value7``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key1_Value8``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value``3(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value1``3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value2``4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value3``5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value4``6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value5``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value6``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key2_Value7``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value``4(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value1``4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value2``5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value3``6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value4``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value5``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key3_Value6``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value``5(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value1``5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value2``6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value3``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value4``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value5(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key4_Value5``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value``6(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value1``6(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value2``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value3``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value4(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key5_Value4``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value``7(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value1``7(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value2``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value3(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key6_Value3``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value``8(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value1``8(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value2(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key7_Value2``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key8_Value(System.Collections.Generic.IDictionary{System.Object[],System.Object},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key8_Value``9(System.Collections.Generic.IDictionary{System.Object[],System.Object})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key8_Value1(System.Collections.Generic.IDictionary{System.Object[],System.Object[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Cast_Key8_Value1``9(System.Collections.Generic.IDictionary{System.Object[],System.Object[]})">
            <summary>
            Casts the key and value of the specified dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type[],System.Type[],mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="keyTypes"></param>
            <param name="valueTypes"></param>
            <param name="stringConverter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value(System.Collections.Generic.IDictionary{System.String,System.String},System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value``2(System.Collections.Generic.IDictionary{System.String,System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value1(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value1``2(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value2(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value2``3(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value3(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value3``4(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value4(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value4``5(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value5(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value5``6(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value6(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value6``7(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value7(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value7``8(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value8(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value8``9(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value9(System.Collections.Generic.IDictionary{System.String,System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key_Value8``10(System.Collections.Generic.IDictionary{System.String,System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value``2(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value1``2(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value2``3(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value3``4(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value4``5(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value5``6(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value6``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value7``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value8``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key1_Value9``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value``3(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value1``3(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value2``4(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value3``5(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value4``6(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value5``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value6``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value7``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value8``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key2_Value9``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value``4(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value1``4(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value2``5(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value3``6(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value4``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value5``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value6``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value7``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value8``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key3_Value9``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value``5(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value1``5(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value2``6(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value3``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value4``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value5``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value6``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value7``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value8``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key4_Value9``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value``6(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value1``6(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value2``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value3``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value4``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value5``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value6``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value7``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value8``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key5_Value9``14(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value``7(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value1``7(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value2``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value3``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value4``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value5``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value6``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value7``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value8``14(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key6_Value9``15(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value``8(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value1``8(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value2``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value3``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value4``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value5``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value6``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value7``14(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value8``15(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key7_Value9``16(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value``9(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value1``9(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value2``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value3``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value4``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value5``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value6``14(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value7``15(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value8``16(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key8_Value9``17(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value(System.Collections.Generic.IDictionary{System.String[],System.String},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value``10(System.Collections.Generic.IDictionary{System.String[],System.String},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value1(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value1``10(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value2(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value2``11(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value3(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value3``12(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value4(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value4``13(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value5(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value5``14(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value6(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value6``15(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value7(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value7``16(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value8(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value8``17(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value9(System.Collections.Generic.IDictionary{System.String[],System.String[]},System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,System.Type,mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <param name="dictionary"></param>
            <param name="keyType1"></param>
            <param name="keyType2"></param>
            <param name="keyType3"></param>
            <param name="keyType4"></param>
            <param name="keyType5"></param>
            <param name="keyType6"></param>
            <param name="keyType7"></param>
            <param name="keyType8"></param>
            <param name="keyType9"></param>
            <param name="valueType1"></param>
            <param name="valueType2"></param>
            <param name="valueType3"></param>
            <param name="valueType4"></param>
            <param name="valueType5"></param>
            <param name="valueType6"></param>
            <param name="valueType7"></param>
            <param name="valueType8"></param>
            <param name="valueType9"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.Parse_Key9_Value9``18(System.Collections.Generic.IDictionary{System.String[],System.String[]},mxProject.Devs.DataGeneration.IStringConverter)">
            <summary>
            Parses the key and value of the specified string dictionary.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TKey6"></typeparam>
            <typeparam name="TKey7"></typeparam>
            <typeparam name="TKey8"></typeparam>
            <typeparam name="TKey9"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="dictionary"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsNullableDictionary``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            Wraps as a dictionary with nullable tuples.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsNullableDictionary``3(System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},``2})">
            <summary>
            Wraps as a dictionary with nullable tuples.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.AsNullableDictionary``4(System.Collections.Generic.IDictionary{System.ValueTuple{``0,``1},System.ValueTuple{``2,``3}})">
            <summary>
            Wraps as a dictionary with nullable tuples.
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``5(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``6(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``7(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``8(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``9(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``10(System.Collections.Generic.IDictionary{``0,System.ValueTuple{``1,``2,``3,``4,``5,``6,``7,System.ValueTuple{``8,``9}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``3(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``4(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``5(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``6(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``7(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``8(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``9(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8}}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IDictionaryExtensions.GetValueTypes``10(System.Collections.Generic.IDictionary{``0,System.ValueTuple{System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.Nullable{``7},System.ValueTuple{System.Nullable{``8},System.Nullable{``9}}}})">
            <summary>
            
            </summary>
            <typeparam name="TAnyKey"></typeparam>
            <typeparam name="TValue1"></typeparam>
            <typeparam name="TValue2"></typeparam>
            <typeparam name="TValue3"></typeparam>
            <typeparam name="TValue4"></typeparam>
            <typeparam name="TValue5"></typeparam>
            <typeparam name="TValue6"></typeparam>
            <typeparam name="TValue7"></typeparam>
            <typeparam name="TValue8"></typeparam>
            <typeparam name="TValue9"></typeparam>
            <param name="_"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Internals.ConvertEnumerator`2">
            <summary>
            
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.FieldName">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.Index">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.InitializeAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.GenerateNext">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.Reset">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.GetRawValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.DataGeneratorAdditionalField.IsNullValue">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.Internals.StringKeyValuePairExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.StringKeyValuePairExtensions.ToStringValue``1(System.Collections.Generic.KeyValuePair{System.String,``0})">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.StringKeyValuePairExtensions.ToStringValue(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.StringKeyValuePairExtensions.FromStringValue``1(System.Collections.Generic.KeyValuePair{mxProject.Devs.DataGeneration.StringValue,``0})">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.Internals.StringKeyValuePairExtensions.FromStringValue(System.Collections.Generic.KeyValuePair{mxProject.Devs.DataGeneration.StringValue,mxProject.Devs.DataGeneration.StringValue})">
            <summary>
            
            </summary>
            <param name="keyValue"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IRandomGenerator">
            <summary>
            Provides the functionality needed to generate random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextBoolean(System.Double)">
            <summary>
            Generates a Boolean value.
            </summary>
            <param name="trueProbability">probability of returning true. (between 0 and 1.0)</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextByte(System.Byte,System.Byte)">
            <summary>
            Generates a Byte value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextInt16(System.Int16,System.Int16)">
            <summary>
            Generates an Int16 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextInt32(System.Int32,System.Int32)">
            <summary>
            Generates an Int32 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextInt64(System.Int64,System.Int64)">
            <summary>
            Generates an Int64 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextSingle(System.Single,System.Single)">
            <summary>
            Generates a Single value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextDouble(System.Double,System.Double)">
            <summary>
            Generates a Double value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Generates a Decimal value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextSByte(System.SByte,System.SByte)">
            <summary>
            Generates a SByte value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextUInt16(System.UInt16,System.UInt16)">
            <summary>
            Generates a UInt16 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextUInt32(System.UInt32,System.UInt32)">
            <summary>
            Generates a UInt32 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextUInt64(System.UInt64,System.UInt64)">
            <summary>
            Generates a UInt64 value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextDateTime(System.DateTime,System.DateTime)">
            <summary>
            Generates a DateTime value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextDateTimeOffset(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Generates a DateTimeOffset value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IRandomGenerator.NextTimeSpan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Generates a TimeSpan value.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.IStringConverter">
            <summary>
            Provides the functionality needed to convert string values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IStringConverter.ConvertTo(System.String,System.Type)">
            <summary>
            Converts the specified string value.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type of converted value.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.IStringConverter.ConvertTo``1(System.String)">
            <summary>
            Converts the specified string value.
            </summary>
            <typeparam name="T">The type of converted value.</typeparam>
            <param name="value">The value.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.LookupExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.ILookup`2"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.LookupExtensions.TryFirst``2(System.Linq.ILookup{``0,``1},``0,``1@)">
            <summary>
            
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TElement"></typeparam>
            <param name="lookup"></param>
            <param name="key"></param>
            <param name="found"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.MathEx">
            <summary>
            Mathematical methods.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Double,System.Int32)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Double,System.Int32,System.Int32)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Double,System.Int32,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="digits">The number of fractional digits in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Decimal,System.Int32)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Decimal,System.Int32,System.Int32)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.RoundMultiple(System.Decimal,System.Int32,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds to the specified multiples.
            </summary>
            <param name="value">The number to be rounded.</param>
            <param name="multiple">The multiple.</param>
            <param name="decimals">The number of decimal places in the return value.</param>
            <param name="mode">Specification for how to round value if it is midway between two other numbers.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.CeilingMultiple(System.Double,System.Int32)">
            <summary>
            Returns the smallest multiple that is greater than or equal to the specified value.
            </summary>
            <param name="value">The number.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.CeilingMultiple(System.Decimal,System.Int32)">
            <summary>
            Returns the smallest multiple that is greater than or equal to the specified value.
            </summary>
            <param name="value">The number.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.FloorMultiple(System.Decimal,System.Int32)">
            <summary>
            Returns the largest multiple that is less than or equal to the specified number.
            </summary>
            <param name="value">The number.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.MathEx.FloorMultiple(System.Double,System.Int32)">
            <summary>
            Returns the largest multiple that is less than or equal to the specified number.
            </summary>
            <param name="value">The number.</param>
            <param name="multiple">The multiple.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationFieldAttribute">
            <summary>
            Basic implementation of DataGeneratorField attribute.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationFieldAttribute.#ctor(System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationFieldAttribute.FieldName">
            <summary>
            Gets the field name.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorField"/> interface.
            </summary>
            <param name="member"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationTupleFieldAttribute">
            <summary>
            Basic implementation of DataGeneratorTupleField attribute.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationTupleFieldAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Create a new instanse.
            </summary>
            <param name="tupleId">A value that uniquely identifies a group of tuple fields.</param>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationTupleFieldAttribute.TupleID">
            <summary>
            Gets the value that uniquely identifies a group of tuple fields.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationTupleFieldAttribute.FieldIndex">
            <summary>
            Gets the field index.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.DataGenerationTupleFieldAttribute.CreateTupleField(mxProject.Devs.DataGeneration.IDataGeneratorField[],mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField"/> interface.
            </summary>
            <param name="fields"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyEnumFieldAttribute">
            <summary>
            Settings for a field that enumerates one of the specified enum values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyEnumFieldAttribute.#ctor(System.Type,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="enumType">The type of the enum type.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyEnumFieldAttribute.#ctor(System.Type,System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="enumType">The type of the enum type.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyEnumFieldAttribute.ConvertValues(System.Object[],System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute">
            <summary>
            Settings for a field that enumerates one of the specified values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Boolean[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Byte[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.SByte[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Int16[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.UInt16[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Int32[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.UInt32[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Int64[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.UInt64[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Single[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Double[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Decimal[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Char[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Guid[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.Type,System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.#ctor(System.String,System.Type,System.Object[],System.Double)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.NullProbability">
            <summary>
            Gets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyFieldAttribute.ConvertValues(System.Object[],System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Converts the specified value to a type that enumerates it.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="context">The context.</param>
            <returns>The converted values.</returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyGuidFieldAttribute">
            <summary>
            Settings for a field that enumerates one of the specified Guid values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.AnyGuidFieldAttribute.#ctor(System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.DirectProductFieldAttribute">
            <summary>
            Indicates that it is part of a field that generates a direct product of multiple values. 
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.DirectProductFieldAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Create a new instanse.
            </summary>
            <param name="tupleId">A value that uniquely identifies a group of tuple fields.</param>
            <param name="fieldIndex">The field index.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.DirectProductFieldAttribute.CreateTupleField(mxProject.Devs.DataGeneration.IDataGeneratorField[],mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates an instance of <see cref="T:mxProject.Devs.DataGeneration.IDataGeneratorTupleField"/> interface.
            </summary>
            <param name="fields"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachEnumFieldAttribute">
            <summary>
            Settings of a field that enumerates the specified enum values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachEnumFieldAttribute.#ctor(System.Type,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="enumType">The type of the enum type.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachEnumFieldAttribute.#ctor(System.Type,System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="enumType">The type of the enum type.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachEnumFieldAttribute.ConvertValues(System.Object[],System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute">
            <summary>
            Settings of a field that enumerates the specified values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Boolean[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Byte[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.SByte[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Int16[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.UInt16[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Int32[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.UInt32[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Int64[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.UInt64[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Single[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Double[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Decimal[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Char[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Guid[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.Type,System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.#ctor(System.String,System.Type,System.Object[],System.Double)">
            <summary>
            Create a new instance.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.ValueType">
            <summary>
            Gets the value type.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.NullProbability">
            <summary>
            Gets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachFieldAttribute.ConvertValues(System.Object[],System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Converts the specified value to a type that enumerates it.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="valueType">The type of the field value.</param>
            <param name="context">The context.</param>
            <returns>The converted values.</returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachGuidFieldAttribute">
            <summary>
            Settings of a field that enumerates the specified Guid values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.EachGuidFieldAttribute.#ctor(System.String[],System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="values">The values to enumerate.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomBooleanFieldAttribute">
            <summary>
            Settings of a field that enumerates Boolean random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomBooleanFieldAttribute.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="trueProbability">Probability of returning true. (between 0 and 1.0)</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomBooleanFieldAttribute.TrueProbability">
            <summary>
            Gets probability of returning true. (between 0 and 1.0)
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomBooleanFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomByteFieldAttribute">
            <summary>
            Settings of a field that enumerates Byte random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomByteFieldAttribute.#ctor(System.Byte,System.Byte,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomByteFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomByteFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomByteFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTime random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeFieldAttribute.#ctor(System.String,System.String,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeOffsetFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTimeOffset random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeOffsetFieldAttribute.#ctor(System.String,System.String,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeOffsetFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeOffsetFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDateTimeOffsetFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDecimalFieldAttribute">
            <summary>
            Settings of a field that enumerates Decimal random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDecimalFieldAttribute.#ctor(System.Double,System.Double,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDecimalFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDecimalFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDecimalFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDoubleFieldAttribute">
            <summary>
            Settings of a field that enumerates Double random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDoubleFieldAttribute.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDoubleFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDoubleFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomDoubleFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute">
            <summary>
            Basic implementation of a field attribute that enumerates random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute.#ctor(System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute.NullProbability">
            <summary>
            Gets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute.SelectorDecralingType">
            <summary>
            Gets the type in which the selector method is declared.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute.SelectorMethodName">
            <summary>
            Gets the name of the selector method.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomFieldAttribute.GetSelectorMethod``1(System.Type,System.String)">
            <summary>
            Gets the selector method.
            </summary>
            <typeparam name="TMethod">The type of the selector method.</typeparam>
            <param name="declaringType">The type in which the selector method is declared.</param>
            <param name="methodName">The name of the selector method.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomGuidFieldAttribute">
            <summary>
            Settings of a field that enumerates Guid random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomGuidFieldAttribute.#ctor(System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomGuidFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt16FieldAttribute">
            <summary>
            Settings of a field that enumerates Int16 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt16FieldAttribute.#ctor(System.Int16,System.Int16,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt16FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt16FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt16FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt32FieldAttribute">
            <summary>
            Settings of a field that enumerates Int32 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt32FieldAttribute.#ctor(System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt32FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt32FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt32FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt64FieldAttribute">
            <summary>
            Settings of a field that enumerates Int64 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt64FieldAttribute.#ctor(System.Int64,System.Int64,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt64FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt64FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomInt64FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSByteFieldAttribute">
            <summary>
            Settings of a field that enumerates SByte random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSByteFieldAttribute.#ctor(System.SByte,System.SByte,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSByteFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSByteFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSByteFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSingleFieldAttribute">
            <summary>
            Settings of a field that enumerates Single random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSingleFieldAttribute.#ctor(System.Single,System.Single,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSingleFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSingleFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomSingleFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomTimeSpanFieldAttribute">
            <summary>
            Settings of a field that enumerates TimeSpan random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomTimeSpanFieldAttribute.#ctor(System.String,System.String,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomTimeSpanFieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomTimeSpanFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomTimeSpanFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt16FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt16 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt16FieldAttribute.#ctor(System.UInt16,System.UInt16,System.Double,System.Type,System.String,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="selectorDecralingType">The type in which the selector method is declared.</param>
            <param name="selectorMethodName">The name of the selector method.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt16FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt16FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt16FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt32FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt32 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt32FieldAttribute.#ctor(System.UInt32,System.UInt32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt32FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt32FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt32FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt64FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt64 random values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt64FieldAttribute.#ctor(System.UInt64,System.UInt64,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt64FieldAttribute.MinimumValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt64FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.RandomUInt64FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute">
            <summary>
            Settings of a field that enumerates Byte sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute.#ctor(System.Byte,System.Byte,System.Byte,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceByteFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTime sequencial values at monthly intervals.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute.#ctor(System.String,System.String,System.Int32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="months">Number of months.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute.Months">
            <summary>
            Gets the number of months.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTimeOffset sequencial values at monthly intervals.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute.#ctor(System.String,System.String,System.Int32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="months">Number of months.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute.Months">
            <summary>
            Gets the number of months.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateMonthOffsetFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTime sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute.#ctor(System.String,System.String,System.String,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute">
            <summary>
            Settings of a field that enumerates DateTimeOffset sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute.#ctor(System.String,System.String,System.String,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceDateTimeOffsetFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceFieldAttribute">
            <summary>
            Basic implementation of a field attribute that enumerates sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceFieldAttribute.#ctor(System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceFieldAttribute.NullProbability">
            <summary>
            Gets probability of returning null. (between 0 and 1.0)
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute">
            <summary>
            Settings of a field that enumerates Int16 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute.#ctor(System.Int16,System.Int16,System.Int16,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt16FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute">
            <summary>
            Settings of a field that enumerates Int32 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt32FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute">
            <summary>
            Settings of a field that enumerates Int64 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute.#ctor(System.Int64,System.Int64,System.Int64,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceInt64FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute">
            <summary>
            Settings of a field that enumerates SByte sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute.#ctor(System.SByte,System.SByte,System.SByte,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceSByteFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute">
            <summary>
            Settings of a field that enumerates TimeSpan sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute.#ctor(System.String,System.String,System.String,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceTimeSpanFieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt16 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute.#ctor(System.UInt16,System.UInt16,System.UInt16,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt16FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt32 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt32FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute">
            <summary>
            Settings of a field that enumerates UInt64 sequencial values.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute.#ctor(System.UInt64,System.UInt64,System.UInt64,System.Double,System.String)">
            <summary>
            Create a new instance.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="increment">The amount of increase in value when creating a new sequence value.</param>
            <param name="nullProbability">Probability of returning null. (between 0 and 1.0)</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute.InitialValue">
            <summary>
            Gets the initial value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute.MaximumValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute.Increment">
            <summary>
            Gets the amount of increase in value when creating a new sequence value.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Fields.SequenceUInt64FieldAttribute.CreateField(System.Reflection.MemberInfo,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <inheritdoc/>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Internals.DataGeneratorFieldNameAndValueType">
            <summary>
            Field information.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Internals.DataGeneratorFieldNameAndValueType.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.ModelMappings.Internals.DataGeneratorFieldNameAndValueType.ValueType">
            <summary>
            Gets or sets the value type.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.ModelMappings.Internals.DataGeneratorTypeLoader.FromType(System.Type,mxProject.Devs.DataGeneration.DataGeneratorContext)">
            <summary>
            Creates a DataGeneratorBuilder from the attributes defined for the specified type.
            </summary>
            <param name="modelType">The type of the data model.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Internals.MemberState">
            <summary>
            State related to a member generated in the process of creating DataGeneratorBuilder from type information.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.ModelMappings.Internals.TupleFieldState">
            <summary>
            State related to a tuple field generated in the process of creating DataGeneratorBuilder from type information.
            </summary>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringDictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringDictionaryExtensions.AsStringValue``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringDictionaryExtensions.AsStringValue(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringEnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringEnumerableExtensions.AsNullableStringValue(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringExtensions.ToStringValue(System.String)">
            <summary>
            Converts to StringValue type.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringExtensions.ToStringArray(mxProject.Devs.DataGeneration.StringValue[])">
            <summary>
            Converts to String[].
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringLookupExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.ILookup`2"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringLookupExtensions.AsStringValue``1(System.Linq.ILookup{System.String,``0})">
            <summary>
            
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="lookup"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringLookupExtensions.AsStringValue(System.Linq.ILookup{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="lookup"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:mxProject.Devs.DataGeneration.StringValue.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.Equals(mxProject.Devs.DataGeneration.StringValue)">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.op_Equality(mxProject.Devs.DataGeneration.StringValue,mxProject.Devs.DataGeneration.StringValue)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.op_Inequality(mxProject.Devs.DataGeneration.StringValue,mxProject.Devs.DataGeneration.StringValue)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.op_Implicit(mxProject.Devs.DataGeneration.StringValue)~System.String">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.StringValue.op_Implicit(System.String)~mxProject.Devs.DataGeneration.StringValue">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``2(System.ValueTuple{System.Nullable{``0},System.Nullable{``1}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``3(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``4(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``5(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``6(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth value of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``7(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth value of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth value of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``8(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7}}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth value of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth value of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh value of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TupleExtensions.HasAllValues``9(System.ValueTuple{System.Nullable{``0},System.Nullable{``1},System.Nullable{``2},System.Nullable{``3},System.Nullable{``4},System.Nullable{``5},System.Nullable{``6},System.ValueTuple{System.Nullable{``7},System.Nullable{``8}}})">
            <summary>
            Gets a value that indicates whether all elements of the specified tuple have values. 
            </summary>
            <typeparam name="T1">The type of the first value of the tuple.</typeparam>
            <typeparam name="T2">The type of the second value of the tuple.</typeparam>
            <typeparam name="T3">The type of the third value of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth value of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth value of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth value of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh value of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth value of the tuple.</typeparam>
            <typeparam name="T9">The type of the ninth value of the tuple.</typeparam>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:mxProject.Devs.DataGeneration.TypeExtensions.GetUnderlayValueTypeOrSelf(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.EnumerationCreator">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.StringEnumerationCreator">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.EnumerationCreator`1">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T">The type of value to generate.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`2">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`3">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`4">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`5">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`6">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`7">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`8">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
        <member name="T:mxProject.Devs.DataGeneration.TupleEnumerationCreator`9">
            <summary>
            Indicates a method that generates an enumeration. 
            </summary>
            <typeparam name="T1">The type of object to enumerate in the first enumeration.</typeparam>
            <typeparam name="T2">The type of object to enumerate in the second enumeration.</typeparam>
            <typeparam name="T3">The type of object to enumerate in the third enumeration.</typeparam>
            <typeparam name="T4">The type of object to enumerate in the fourth enumeration.</typeparam>
            <typeparam name="T5">The type of object to enumerate in the fifth enumeration.</typeparam>
            <typeparam name="T6">The type of object to enumerate in the sixth enumeration.</typeparam>
            <typeparam name="T7">The type of object to enumerate in the seventh enumeration.</typeparam>
            <typeparam name="T8">The type of object to enumerate in the eighth enumeration.</typeparam>
            <typeparam name="T9">The type of object to enumerate in the ninth enumeration.</typeparam>
            <param name="generateCount">Number of values to generate.</param>
            <returns></returns>
        </member>
    </members>
</doc>
